/*****************************************************************************
*                                                                            *
*                     SOFTING Industrial Automation GmbH                     *
*                          Richard-Reitzner-Allee 6                          *
*                                D-85540 Haar                                *
*                        Phone: ++49-89-4 56 56-0                            *
*                          Fax: ++49-89-4 56 56-3 99                         *
*                                                                            *
*                            SOFTING CONFIDENTIAL                            *
*                                                                            *
*                     Copyright (C) SOFTING IA GmbH 2022                     *
*                             All Rights Reserved                            *
*                                                                            *
* NOTICE: All information contained herein is, and remains the property of   *
*   SOFTING Industrial Automation GmbH and its suppliers, if any. The intel- *
*   lectual and technical concepts contained herein are proprietary to       *
*   SOFTING Industrial Automation GmbH and its suppliers and may be covered  *
*   by German and Foreign Patents, patents in process, and are protected by  *
*   trade secret or copyright law. Dissemination of this information or      *
*   reproduction of this material is strictly forbidden unless prior         *
*   written permission is obtained from SOFTING Industrial Automation GmbH.  *
******************************************************************************
******************************************************************************
*                                                                            *
* PROJECT_NAME             OPC UA C++ Server & Client SDK                    *
*                                                                            *
* VERSION                  6.00.0                                            *
*                                                                            *
* DATE                     13.6.2022                                            *
*                                                                            *
*****************************************************************************/

#ifndef SERVERGENERALMODELCHANGEEVENT_H
#define SERVERGENERALMODELCHANGEEVENT_H
#if TB5_ALARMS

#include "ServerBaseModelChangeEvent.h"

namespace SoftingOPCToolbox5
{
	namespace Server
	{
		/*! This event shall be generated to indicate a change of the AddressSpace structure.
		*
		* GeneralModelChangeEvents are Events of the GeneralModelChangeEventType.
		* The GeneralModelChangeEventType is a subtype of the BaseModelChangeEventType.
		* It contains information about the Node that was changed and the action
		* that occurred to cause the ModelChangeEvent (e.g. add a Node, delete
		* a Node, etc.). If the affected Node is a Variable or Object, then
		* the TypeDefinitionNode is also present.
		* To allow Event compression, a GeneralModelChangeEvent contains an array of changes.
		*
		* A GeneralModelChangeEvent is automatically generated by the SDK if references to versioned nodes
		* are added or removed.
		*
		* Beside the properties of the base class additionally the following mandatory properties shall be set:
		* @li Changes:				A vector of ModelChangeStructure values.
		*
		* @see ServerBaseModelChangeEvent for detailed information about ModelChangeEvents. */
		class TBC_EXPORT ServerGeneralModelChangeEvent
			: public ServerBaseModelChangeEvent
		{
		public:
			/*! Constructs a new GeneralModelChange event with an empty list of changes. */
			static ObjectPointer<ServerGeneralModelChangeEvent> create();
			/*! Destructor */
			virtual ~ServerGeneralModelChangeEvent();

		protected:
			/*! Constructs a new event for the given event type.
			*
			* This constructor shall be called from derived classes with the concrete event type. */
			ServerGeneralModelChangeEvent();
			/*! @overload */
			ServerGeneralModelChangeEvent(const INodeId* eventTypeNode);

		public:
			/*! Sets the the changes for the Event
			*
			* @param changes The array of ModelChangeStructureDataType */
			EnumStatusCode setChanges(const std::vector<ModelChangeStructureDataType> &changes);

			/*! Returns the changes property.
			*
			* @see setChanges() */
			std::vector<ModelChangeStructureDataType> getChanges();

		};
		typedef ObjectPointer<ServerGeneralModelChangeEvent> ServerGeneralModelChangeEventPtr;
		typedef ObjectPointer<const ServerGeneralModelChangeEvent> ServerGeneralModelChangeEventConstPtr;
	}
}

#endif
#endif // SERVERGENERALMODELCHANGEEVENT_H
