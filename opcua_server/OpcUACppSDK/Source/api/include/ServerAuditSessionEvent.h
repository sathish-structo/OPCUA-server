/*****************************************************************************
*                                                                            *
*                     SOFTING Industrial Automation GmbH                     *
*                          Richard-Reitzner-Allee 6                          *
*                                D-85540 Haar                                *
*                        Phone: ++49-89-4 56 56-0                            *
*                          Fax: ++49-89-4 56 56-3 99                         *
*                                                                            *
*                            SOFTING CONFIDENTIAL                            *
*                                                                            *
*                     Copyright (C) SOFTING IA GmbH 2022                     *
*                             All Rights Reserved                            *
*                                                                            *
* NOTICE: All information contained herein is, and remains the property of   *
*   SOFTING Industrial Automation GmbH and its suppliers, if any. The intel- *
*   lectual and technical concepts contained herein are proprietary to       *
*   SOFTING Industrial Automation GmbH and its suppliers and may be covered  *
*   by German and Foreign Patents, patents in process, and are protected by  *
*   trade secret or copyright law. Dissemination of this information or      *
*   reproduction of this material is strictly forbidden unless prior         *
*   written permission is obtained from SOFTING Industrial Automation GmbH.  *
******************************************************************************
******************************************************************************
*                                                                            *
* PROJECT_NAME             OPC UA C++ Server & Client SDK                    *
*                                                                            *
* VERSION                  6.00.0                                            *
*                                                                            *
* DATE                     13.6.2022                                            *
*                                                                            *
*****************************************************************************/

#ifndef SERVERAUDITSESSIONEVENT_H
#define SERVERAUDITSESSIONEVENT_H
#if TB5_ALARMS
#include "Base.h"
#include "Enums.h"
#include "ServerAuditEvent.h"

namespace SoftingOPCToolbox5
{
	namespace Server
	{
		/*! Base class of all session related audit events.
		*
		* If the event is generated by a TransferSubscriptions service call, the SourceNode should be
		* assigned to the SessionDiagnostics object that represents the session. The SourceName for
		* events of this type should be "Session/TransferSubscriptions".
		*
		* Otherwise, the SourceNode for events of this type should be assigned to the Server object. The
		* SourceName for events of this type should be "Session/" and the service that generates the event
		* (e.g. CreateSession, ActivateSession or CloseSession).
		*
		* Beside mandatory properties of the base class additionally the following mandatory properties shall be set:
		* @li SessionId:	Identifies the session where the audit event is related to. */
		class TBC_EXPORT AuditSessionEvent
			: public AuditEvent
		{
		public:
			/*! Constructs a new AuditSessionEvent instance.
			*
			* The newly created object has already the following properties initially set:
			* @li Time:				The actual time.
			* @li ActionTimeStamp:	The actual time.
			* @li ReceiveTime:		The actual time.
			* @li Severity:			1
			* @li ServerId:			The ID of the server from the application description. */
			static ObjectPointer<AuditSessionEvent> create();

		protected:
			/*! This constructor is used for derived classes.
			*
			* This constructor shall be called for specialized events with the concrete event type.
			*
			* The newly created object has already the following properties initially set:
			* @li Time:				The actual time.
			* @li ActionTimeStamp:	The actual time.
			* @li ReceiveTime:		The actual time.
			* @li Severity:			1
			* @li ServerId:			The ID of the server from the application description. */
			AuditSessionEvent(const INodeId* eventTypeNode);

		public:
			/*! Destructor */
			virtual ~AuditSessionEvent();

			/*! Returns the SessionId of the session that the service call was issued on.
			*
			* @see setSessionId() */
			NodeId getSessionId() const;
			/*! Sets the SessionId of the session that the service call was issued on.
			*
			* SessionId identifies the session where the audit event is related to.
			* If no Session context exists (e.g. for a failed CreateSession service call) the SessionId is set to
			* the null NodeId.
			*
			* @param sessionId The ID of the event related session */
			EnumStatusCode setSessionId(const INodeId* sessionId);

		private:
			/*! Forbid use default constructor */
			AuditSessionEvent();
			/*! Forbid use assignment operator. */
			AuditSessionEvent& operator=(const AuditSessionEvent&);
			/*! Forbid use of copy constructor. */
			AuditSessionEvent(const AuditSessionEvent&);
		};
		typedef ObjectPointer<AuditSessionEvent> AuditSessionEventPtr;
		typedef ObjectPointer<const AuditSessionEvent> AuditSessionEventConstPtr;

	} // end Server namespace
} // toolbox namespace end

#endif
#endif	// SERVERAUDITSESSIONEVENT_H
