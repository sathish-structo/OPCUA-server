/*****************************************************************************
*                                                                            *
*                     SOFTING Industrial Automation GmbH                     *
*                          Richard-Reitzner-Allee 6                          *
*                                D-85540 Haar                                *
*                        Phone: ++49-89-4 56 56-0                            *
*                          Fax: ++49-89-4 56 56-3 99                         *
*                                                                            *
*                            SOFTING CONFIDENTIAL                            *
*                                                                            *
*                     Copyright (C) SOFTING IA GmbH 2022                     *
*                             All Rights Reserved                            *
*                                                                            *
* NOTICE: All information contained herein is, and remains the property of   *
*   SOFTING Industrial Automation GmbH and its suppliers, if any. The intel- *
*   lectual and technical concepts contained herein are proprietary to       *
*   SOFTING Industrial Automation GmbH and its suppliers and may be covered  *
*   by German and Foreign Patents, patents in process, and are protected by  *
*   trade secret or copyright law. Dissemination of this information or      *
*   reproduction of this material is strictly forbidden unless prior         *
*   written permission is obtained from SOFTING Industrial Automation GmbH.  *
******************************************************************************
******************************************************************************
*                                                                            *
* PROJECT_NAME             OPC UA C++ Server & Client SDK                    *
*                                                                            *
* VERSION                  6.00.0                                            *
*                                                                            *
* DATE                     13.6.2022                                            *
*                                                                            *
*****************************************************************************/

#ifndef IGUID_H
#define IGUID_H

namespace SoftingOPCToolbox5
{
	/*! The Guid data type defines a value that is a 128-bit Globally Unique Identifier.
	* The static method Guid::generateGuid() may be used to generate a new GUID. */
	class TBC_EXPORT IGuid
	{
	public:
		/*! Destructor */
		virtual ~IGuid() {};

		/*! Returns the components of the GUID. */
		virtual void getData(OTUInt32* data1, OTUInt16* data2, OTUInt16* data3, OTUInt8 pData4[8]) const = 0;
		/*! Initializes a Guid instance with a GUID that has been generated previously or
		* that has been generated by an external GUID generator.
		*
		* Consider using Guid::generateGuid() if you intend to generate a new GUID. */
		virtual void setData(OTUInt32 data1, OTUInt16 data2, OTUInt16 data3, const OTUInt8 data4[8]) = 0;

		/*! Parses the given string and sets the parsed GUID on the Guid instance.
		*
		* The string must conform to the following syntax: {hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh}
		* where h represents a hexadecimal figure between 0 and F.
		* Example: {00000000-0000-0000-0000-000000000000} */
		virtual EnumStatusCode parse(tstring guidString) = 0;

		/*! Returns whether this Guid instance contains a "null" GUID. */
		virtual bool isNull() const = 0;

		/*! Returns a string representation of the Guid for debugging purposes */
		virtual tstring toString() const = 0;

		/*! Copies the content of @p pSource to this instance */
		virtual EnumStatusCode set(const IGuid* pOther) = 0;
		/*! @overload */
		virtual EnumStatusCode set(const IGuid& other) = 0;

		/*! Compares this instance to the given @p other instance.
		*
		* @li Returns <0, if "this < other"
		* @li Returns 0, if "this == other"
		* @li Returns >0, if "this > other" */
		virtual int compare(const IGuid* other) const = 0;
		/*! @overload */
		virtual int compare(const IGuid& other) const = 0;

		/*! Compares two instances for equality */
		virtual bool operator==(const IGuid& other) const = 0;
		/*! Compares two instances for inequality */
		virtual bool operator!=(const IGuid& other) const = 0;

		/*! Clears the contents of this object to enable its re-use. */
		virtual void clear() = 0;

		/*! For internal use only */
		virtual void* getInternHandle() const = 0;
	};
}

#endif	// IGUID_H
