/*****************************************************************************
*                                                                            *
*                     SOFTING Industrial Automation GmbH                     *
*                          Richard-Reitzner-Allee 6                          *
*                                D-85540 Haar                                *
*                        Phone: ++49-89-4 56 56-0                            *
*                          Fax: ++49-89-4 56 56-3 99                         *
*                                                                            *
*                            SOFTING CONFIDENTIAL                            *
*                                                                            *
*                     Copyright (C) SOFTING IA GmbH 2022                     *
*                             All Rights Reserved                            *
*                                                                            *
* NOTICE: All information contained herein is, and remains the property of   *
*   SOFTING Industrial Automation GmbH and its suppliers, if any. The intel- *
*   lectual and technical concepts contained herein are proprietary to       *
*   SOFTING Industrial Automation GmbH and its suppliers and may be covered  *
*   by German and Foreign Patents, patents in process, and are protected by  *
*   trade secret or copyright law. Dissemination of this information or      *
*   reproduction of this material is strictly forbidden unless prior         *
*   written permission is obtained from SOFTING Industrial Automation GmbH.  *
******************************************************************************
******************************************************************************
*                                                                            *
* PROJECT_NAME             OPC UA C++ Server & Client SDK                    *
*                                                                            *
* VERSION                  6.00.0                                            *
*                                                                            *
* DATE                     13.6.2022                                            *
*                                                                            *
*****************************************************************************/

#ifndef GUID_H
#define GUID_H

#include "IGuid.h"
#include "GuidStruct.h"

#ifdef SOOS_WINDOWS
#pragma pack(push, 8)
#endif

namespace SoftingOPCToolbox5
{
	/*! The Guid data type defines a value that is a 128-bit Globally Unique Identifier.
	* The static method Guid::generateGuid() may be used to generate a new GUID. */
	class TBC_EXPORT Guid
		: public IGuid
	{
	public:
		/*! Default constructor */
		Guid();
		/*! Initializes a Guid instance with a GUID that has been generated previously or
		* that has been generated by an external GUID generator. */
		Guid(OTUInt32 data1, OTUInt16 data2, OTUInt16 data3, OTUInt8 data4[8]);
		/*! Constructs a copy of the given instance */
		Guid(const GuidStruct& aGuid);
		/*! Constructs a copy of the given instance */
		Guid(const Guid& aGuid);
		/*! Constructs a copy of the given instance */
		Guid(const IGuid* pGuid);
		/*! Constructs a copy of the given instance */
		Guid(const IGuid& aGuid);

		/*! Destructor */
		~Guid();

		/*! Assigns the contents of @p cp to this instance */
		Guid& operator=(const IGuid* cp);
		/*! @overload */
		Guid& operator=(const IGuid& cp);
		/*! @overload */
		Guid& operator=(const Guid& cp);

		/* see IGuid::set */
		virtual EnumStatusCode set(const IGuid* pOther);
		/* see IGuid::set */
		virtual EnumStatusCode set(const IGuid& other);

		/* see IGuid::compare */
		virtual int compare(const IGuid* other) const;
		/*! @overload */
		virtual int compare(const IGuid& other) const;

		/*! Compares two instances for equality */
		virtual bool operator==(const IGuid& other) const;
		/*! Compares two instances for inequality */
		virtual bool operator!=(const IGuid& other) const;

		/*! Returns a Guid instance that contains a new GUID. */
		static Guid generateGuid();

		/* see IGuid::getData(OTUInt32*, OTUInt16*, OTUInt16*, OTUInt8[8]) */
		virtual void getData(OTUInt32* data1, OTUInt16* data2, OTUInt16* data3, OTUInt8 pData4[8]) const;
		/* see IGuid::setData(OTUInt32, OTUInt16, OTUInt16, const OTUInt8[8]) */
		virtual void setData(OTUInt32 data1, OTUInt16 data2, OTUInt16 data3, const OTUInt8 data4[8]);

		/*! Returns whether two Guid instances are equal.
		* If this method is applied to two instances @p guid1 and @p guid2, the result
		* is equivalent to guid1.compare(guid2) == 0. */
		static bool areEqual(const Guid& guid1, const Guid& guid2);

		/* see IGuid::parse */
		virtual EnumStatusCode parse(tstring guidString);

		/* see IGuid::isNull */
		virtual bool isNull() const;

		/* see IGuid::toString */
		virtual tstring toString() const;

		/* see IGuid::clear */
		void clear();

		/* For internal use only */
		void* getInternHandle() const;

	private:
		GuidStruct m_content;
	};
}

#ifdef SOOS_WINDOWS
#pragma pack(pop)
#endif

#endif	// GUID_H
