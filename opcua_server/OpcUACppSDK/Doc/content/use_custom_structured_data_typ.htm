<!DOCTYPE HTML>
<html>
<head>
   <title>Access Custom Structured Data Type Values</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "use_custom_structured_data_typ.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Access Custom Structured Data Type Values</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="retrieve_existing_custom_datatypes.htm">Previous</a>&nbsp;
     <a href="html_programmersguide_how_to.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p>Applications can use existing custom structured data types to store and transport values of this data type.</p>
<p>&nbsp;</p>
<p>Different to the well known data types, the custom structured data types are described by a <span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_data_type_description.htm" class="topiclink">DataTypeDescription</a>. An application has to use this <a href="class_softing_o_p_c_toolbox5_1_1_data_type_description.htm" class="topiclink">DataTypeDescription</a> to clearly identify a data type.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph" style="margin: 0px 0px 0px 0px;"><span class="f_Paragraph">If an application has to deal with several address spaces (e.g. a client which has a connection to several servers), then it can happen that the different address spaces don't support the same types, have the same types on different namespace indexes of even different data types with the same <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeIds</a> (see <a href="comparison_of_nodeids.htm" class="topiclink">Comparison of Node IDs</a>). The application has to take care using the corresponding types and namespace indexes of the address space.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Get a DataTypeDescription of a Specific Data Type</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">For many operations, it is necessary to have the correct <a href="class_softing_o_p_c_toolbox5_1_1_data_type_description.htm" class="topiclink">DataTypeDescription</a> available, either to define the used data type or to compare a retrieved value.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The <a href="class_softing_o_p_c_toolbox5_1_1_data_type_description.htm" class="topiclink">DataTypeDescription</a> of a data type can be retrieved by:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">For a server application: <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_address_space_root.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_address_space_root_1afddf44d4f6f699efe0ce2d93d2480486" class="topiclink">Server::AddressSpaceRoot::getDataTypeDescription()</a> or <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_data_type.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_data_type_1a0a4a659b11f957df835028817a5083d3" class="topiclink">Server::DataType::getDataTypeDescription()</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">For a client application: <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a79a937cc1b1ac9c29e0912628843c1e8" class="topiclink">Client::Session::getDataTypeDescription()</a></span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Note for clients:</span><span class="f_Paragraph"> Different servers can have the same data type node on different namespace indexes or even have different data types on the same NodeId. When dealing with several servers in parallel, make sure to use the correct <a href="class_softing_o_p_c_toolbox5_1_1_data_type_description.htm" class="topiclink">DataTypeDescriptions</a> of the correct server.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Read and Write of a Value</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">To read a custom structured data type <a href="class_softing_o_p_c_toolbox5_1_1_value.htm" class="topiclink">Value</a>, call the generic method <a href="class_softing_o_p_c_toolbox5_1_1_value.htm#class_softing_o_p_c_toolbox5_1_1_value_1a69c6f7b4e268808f4ae6b7f6bcefea47" class="topiclink">Value::getStructuredValue()</a>. It requires the correct <a href="class_softing_o_p_c_toolbox5_1_1_structured_data_type_description.htm" class="topiclink">StructuredDataTypeDescription</a> and returns the <a href="class_softing_o_p_c_toolbox5_1_1_value.htm" class="topiclink">Values</a> of the stored fields. The type, amount and order of the field values matches to the </span><a href="class_softing_o_p_c_toolbox5_1_1_structure_field.htm#class_softing_o_p_c_toolbox5_1_1_structure_field" class="topiclink">StructureField</a><span class="f_Paragraph"> in the <a href="class_softing_o_p_c_toolbox5_1_1_structured_data_type_description.htm" class="topiclink">StructuredDataTypeDescription</a>.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">DataTypeDescriptionConstPtr&nbsp;description&nbsp;=&nbsp;AddressSpaceRoot::instance()-&gt;getDataTypeDescription(NodeId(2,&nbsp;_T(&quot;MyIntegerDoubleStructure&quot;));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(description-&gt;getDescriptionType()&nbsp;==&nbsp;EnumDataTypeDescriptionType_Structure)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;StructuredDataTypeDescriptionConstPtr&nbsp;structuredDescription&nbsp;=&nbsp;static_pointer_cast&lt;const&nbsp;StructuredDataTypeDescription,&nbsp;const&nbsp;DataTypeDescription&gt;(description);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;std::vector&lt;Value&gt;&nbsp;fieldValues;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;value.getStructuredValue(structuredDescription,&nbsp;fieldValues);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;OTInt32&nbsp;integerField&nbsp;=&nbsp;fieldValues[0].getInt32();&nbsp;&nbsp;//&nbsp;matches&nbsp;the&nbsp;structure&nbsp;of&nbsp;&quot;MyIntegerDoubleStructure&quot;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;OTDouble&nbsp;doubleField&nbsp;=&nbsp;fieldValues[1].getDouble();&nbsp;//&nbsp;matches&nbsp;the&nbsp;structure&nbsp;of&nbsp;&quot;MyIntegerDoubleStructure&quot;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">&nbsp;</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">To write a custom structured data type <a href="class_softing_o_p_c_toolbox5_1_1_value.htm" class="topiclink">Value</a>, call the generic method <a href="class_softing_o_p_c_toolbox5_1_1_value.htm#class_softing_o_p_c_toolbox5_1_1_value_1a2c04b3c336be8c929efe5a428c282cad" class="topiclink">Value::setStructuredValue()</a>.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The call requires the <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> of the data type, the <a href="class_softing_o_p_c_toolbox5_1_1_structured_data_type_description.htm" class="topiclink">StructuredDataTypeDescription</a> of this data type and a vector of <a href="class_softing_o_p_c_toolbox5_1_1_value.htm" class="topiclink">Values</a>, that has to fit to the </span><a href="class_softing_o_p_c_toolbox5_1_1_structure_field.htm#class_softing_o_p_c_toolbox5_1_1_structure_field" class="topiclink">StructureField</a><span class="f_Paragraph"> in the <a href="class_softing_o_p_c_toolbox5_1_1_structured_data_type_description.htm" class="topiclink">StructuredDataTypeDescription</a>.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">DataTypeDescriptionConstPtr&nbsp;description&nbsp;=&nbsp;AddressSpaceRoot::instance()-&gt;getDataTypeDescription(NodeId(2,&nbsp;_T(&quot;MyIntegerDoubleStructure&quot;));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(description-&gt;getDescriptionType()&nbsp;==&nbsp;EnumDataTypeDescriptionType_Structure)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;std::vector&lt;Value&gt;&nbsp;fieldValues;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;fieldValues.push_back(Value((OTInt32)65));&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;matches&nbsp;the&nbsp;structure&nbsp;of&nbsp;&quot;MyIntegerDoubleStructure&quot;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;fieldValues.push_back(Value((OTDouble)7.25));&nbsp;//&nbsp;matches&nbsp;the&nbsp;structure&nbsp;of&nbsp;&quot;MyIntegerDoubleStructure&quot;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;StructuredDataTypeDescriptionConstPtr&nbsp;structuredDescription&nbsp;=&nbsp;static_pointer_cast&lt;const&nbsp;StructuredDataTypeDescription,&nbsp;const&nbsp;DataTypeDescription&gt;(description);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;value.setStructuredValue(structuredDescription,&nbsp;fieldValues);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">It is necessary to use the correct <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> of the data type, i.e. within the server application the <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> of the data type node in its address space is necessary.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">In client applications the <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> of the data types in the address space of the server, where the value is read / written to is necessary (see <a href="comparison_of_nodeids.htm" class="topiclink">Comparison of Node IDs)</a>.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">If the data type is</span><span class="f_Paragraph"> a union (</span><a href="class_softing_o_p_c_toolbox5_1_1_structured_data_type_description.htm#class_softing_o_p_c_toolbox5_1_1_structured_data_type_description_1a30f6bfb9633bd4fb2b2264e0a0b4e4f1" class="topiclink">StructuredDataTypeDescription::isUnion</a>) <span class="f_Paragraph">the methods <a href="class_softing_o_p_c_toolbox5_1_1_i_value.htm#class_softing_o_p_c_toolbox5_1_1_i_value_1a036a8b03b1335c02dcc4ac41a55df1f3" class="topiclink">getUnionValue</a> and <a href="class_softing_o_p_c_toolbox5_1_1_i_value.htm#class_softing_o_p_c_toolbox5_1_1_i_value_1a4dd97d18fa7b9ec2b43907ccf086216c" class="topiclink">setUnionValue</a> shall be used. These methods are overloaded, allowing a developer to specify the selected field by name or by index.</span></p>
<p class="p_Paragraph" style="margin: 0px 0px 0px 0px;"><span class="f_Paragraph">&nbsp;</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Raw Access</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">In some circumstances (e.g. forwarding values from a client interface to the servers address space in case of an aggregating server), it may be useful to access the encoded content of a custom complex data type value directly to avoid unnecessary load.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">To read or write the raw content of a custom complex data type, call the method <a href="class_softing_o_p_c_toolbox5_1_1_value.htm#class_softing_o_p_c_toolbox5_1_1_value_1af87bfe5a53d5e73170248117f728efb3" class="topiclink">Value::getComplexValueRaw()</a> or <a href="class_softing_o_p_c_toolbox5_1_1_value.htm#class_softing_o_p_c_toolbox5_1_1_value_1a1eff359c5bac36d648a03cb8dfd7a6a7" class="topiclink">Value::setComplexValueRaw()</a>. It passes the <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> of the Encoding node and the encoded value as <a href="class_softing_o_p_c_toolbox5_1_1_byte_string.htm" class="topiclink">ByteString</a>.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">It is necessary to use the correct <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> of the Encoding node for raw access, i.e. it might be necessary to adapt the namespace index in the NodeId (see <a href="comparison_of_nodeids.htm" class="topiclink">Comparison of Node IDs)</a>.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">See also: <a href="structured_data_types.htm" class="topiclink">Structured Data Types</a>, <a href="define_new_structured_data_typ.htm" class="topiclink">Define New Structured Data Types</a></span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=use_custom_structured_data_typ.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
