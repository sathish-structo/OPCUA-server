<!DOCTYPE HTML>
<html>
<head>
   <title>Handling Multiple Operations</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_requestandtransactionmechanism.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Handling Multiple Operations</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_programmersguide_how_to_server.htm">Previous</a>&nbsp;
     <a href="synchronizewithdevice.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><a id="hdr"></a><span class="f_Paragraph">OPC UA allows that several operations (read, write etc.) are transferred between clients and servers by a single service call. The handling of those service calls is transaction oriented. Such a transaction contains a list of operations (requests) that shall be processed by a server where the response to the client is send when all operations are processed.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The following diagram shows the relationship between transaction (service) and request (operations) on the example of read and write services. (The same relationship between transaction and request is also used for some further services.)</span></p>
<p class="p_ImageCaption"><img src="servertransactions.png" width="269" height="448" alt="ServerTransactions" style="width:269px;height:448px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">The default handling of OPC UA C++ Server &amp; Client SDK V6.00 a server receives a client service and forwards the single requests to the related Nodes. The request handling is the executed at the Nodes.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">With this procedure it is possible to implement a custom handling in two different ways:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_List">Adapt the request handling on the desired nodes.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Adapt the handling of the transaction to get the desired requests.</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">Adapting the request handling on the Nodes is the easier way to get the request data because the Nodes receive only the requests that affects them.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">When adapting the transaction handling the desired requests must first be filtered manually. However here it is possible collect and handle several requests (e.g., if a communication with an underlying device needs to be invoked which allows multiple operations in one asynchronous communication).</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-size: 10pt; font-weight: bold;">Sample to handle multiple read operations</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">This is just to show how multiple operations can be handled in general. Similar write (and other) operations can be implemented.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The assumption is, that all read operations </span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">shall be handled by an </span>underlying <span class="f_Paragraph">device</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">the communication support access to multiple variables / tags in one message</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_List">Create a custom subclass of the </span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_read_transaction.htm" class="topiclink">Server::ReadTransaction</a><span class="f_List"> class with an overridden <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_read_transaction.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_read_transaction_1acbcdd9e8b225f062745c972834b3829c" class="topiclink">handleRequests()</a> method and an overridden constructor which takes a </span><span class="f_FixedSize">TBHandle</span><span class="f_List">.</span><br />
<span class="f_List">The TBHanlde is a pointer to the SDK core object and this will be used by the </span><a href="class_softing_o_p_c_toolbox5_1_1_creator.htm" class="topiclink">Creator</a><span class="f_List"> class (factory).</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">class&nbsp;MyReadTransaction:&nbsp;public&nbsp;Server::ReadTransaction</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">public:</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;MyReadTransaction(TBHandle&nbsp;otbHandle);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;virtual&nbsp;EnumStatusCode&nbsp;handleRequests();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">};</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Implement the constructor with the </span><span class="f_FixedSize">TBHandle</span><span class="f_Paragraph"> -- it just needs to invoke the constructor of the base class.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">MyReadTransaction::MyReadTransaction(TBHandle&nbsp;otbHandle)&nbsp;:&nbsp;ReadTransaction(otbHandle)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">3.</span></td><td style="border:none"><span class="f_Paragraph">Implement the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_read_transaction.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_read_transaction_1acbcdd9e8b225f062745c972834b3829c" class="topiclink">handleRequests()</a> method</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 13px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Get the requests by calling <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_read_transaction.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_read_transaction_1a1f81159dde0a14a697a57e6e9c04c07a" class="topiclink">Server::ReadTransaction::getRequests()</a>.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 13px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Check the status code of the requests, some pre-validation is already done by the SDK (e.g. does the Node exist, is the Node is accessible for this service).</span><br />
<span class="f_Paragraph">Request with a bad status code can be immediately completed.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 13px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Typically only operations on the value attribute are of interest.</span><br />
<span class="f_Paragraph">Other attributes (e.g. NodeClass, DisplayName, ...) can be handled by SDK.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 13px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Search for requests (usually by the <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a>) that shall be handled in one comminication call.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 13px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Start (asynchonous communication.</span><br />
<span class="f_Paragraph">Do NOT block in this method - the complete server will be blocked.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">EnumStatusCode&nbsp;MyReadTransaction::handleRequests()</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">std::vector&lt;&nbsp;ObjectPointer&lt;ReadRequest&gt;&nbsp;&gt;&nbsp;requests&nbsp;=&nbsp;getRequests();</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">std::vector&lt;&nbsp;ObjectPointer&lt;ReadRequest&gt;&nbsp;&gt;&nbsp;requestHandledByCommunication;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">for&nbsp;(size_t&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;requests.size();&nbsp;i++)</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">bool&nbsp;needsDeviceCommunication&nbsp;=&nbsp;false;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;use&nbsp;SDK&nbsp;validation</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">if&nbsp;(StatusCode::isBad(requests[i]-&gt;getDataValue()-&gt;getStatusCode()))</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">requests[i]-&gt;complete();</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">continue;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">ObjectPointer&lt;BaseNode&gt;&nbsp;node&nbsp;=&nbsp;requests[i]-&gt;getNode();</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">if&nbsp;(!node)</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;shall&nbsp;not&nbsp;happen&nbsp;-&nbsp;SDK&nbsp;has&nbsp;already&nbsp;validate&nbsp;this</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">DataValue&nbsp;actualDataValue;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">actualDataValue.setStatusCode(EnumStatusCode_BadNodeIdUnknown);</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">requests[i]-&gt;setDataValue(actualDataValue);</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">requests[i]-&gt;complete();</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">continue;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;Typically&nbsp;we&nbsp;are&nbsp;just&nbsp;interested&nbsp;in&nbsp;the&nbsp;value&nbsp;attribute</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;Other&nbsp;attributes&nbsp;(NodeClass,&nbsp;DisplayName,&nbsp;...)&nbsp;can&nbsp;be&nbsp;handled&nbsp;by&nbsp;SDK</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">if&nbsp;(requests[i]-&gt;getValueId()-&gt;getAttributeId()&nbsp;==&nbsp;EnumAttributeId_Value)</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;Decide&nbsp;whether&nbsp;this&nbsp;node&nbsp;needs&nbsp;handling&nbsp;on&nbsp;device&nbsp;-&nbsp;in&nbsp;most&nbsp;cases&nbsp;identified&nbsp;via&nbsp;NodeId</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">needsDeviceCommunication&nbsp;=&nbsp;isDeviceNode(requests[i]-&gt;getValueId()-&gt;getNodeId());</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">if&nbsp;(needsDeviceCommunication)</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;Here&nbsp;you&nbsp;can&nbsp;state&nbsp;that&nbsp;this&nbsp;request&nbsp;is&nbsp;waiting&nbsp;for&nbsp;a&nbsp;response&nbsp;-&nbsp;not&nbsp;necessary,&nbsp;just&nbsp;for&nbsp;information</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">requests[i]-&gt;setRequestState(EnumRequestState_Pending);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;Store&nbsp;this&nbsp;request&nbsp;(as&nbsp;smart&nbsp;pointer)&nbsp;to&nbsp;be&nbsp;handled&nbsp;asynchronously</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">requestHandledByCommunication.push_back(requests[i]);</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">else</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">//&nbsp;let&nbsp;the&nbsp;SDK&nbsp;handle&nbsp;all&nbsp;other&nbsp;requests</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">node-&gt;handleReadRequest(this,&nbsp;requests[i]);</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">//&nbsp;Start&nbsp;the&nbsp;asynchronous&nbsp;communication&nbsp;-&nbsp;do&nbsp;not&nbsp;wait&nbsp;(blocking)&nbsp;for&nbsp;the&nbsp;response!</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">startAsynchronousCommunucation(requestHandledByCommunication);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">//&nbsp;Always&nbsp;return&nbsp;good&nbsp;here</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">//&nbsp;The&nbsp;single&nbsp;read&nbsp;operations&nbsp;store&nbsp;their&nbsp;result&nbsp;in&nbsp;the&nbsp;status&nbsp;code&nbsp;of&nbsp;the&nbsp;returned&nbsp;DataValue</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">return&nbsp;EnumStatusCode_Good;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">4.</span></td><td style="border:none"><span class="f_Paragraph">Implement a handler for response of asynchronous communication</span><br />
<span class="f_Paragraph">Note: This is just an example how such a handler &quot;could&quot; look like. Real implementation depends highly on underlying communication.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">//&nbsp;assume&nbsp;the&nbsp;response&nbsp;contains&nbsp;all&nbsp;resposnes&nbsp;for&nbsp;the&nbsp;handled&nbsp;operations</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">void&nbsp;handleCommunicationResponse(MyCommunicationResponse&nbsp;response,&nbsp;std::vector&lt;&nbsp;ObjectPointer&lt;ReadRequest&gt;&nbsp;&gt;&nbsp;&amp;requestHandledByCommunication)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//&nbsp;...&nbsp;and&nbsp;the&nbsp;single&nbsp;read&nbsp;operation&nbsp;results&nbsp;can&nbsp;be&nbsp;extratced</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;std::vector&lt;MyCommunicationOperationResult&gt;&nbsp;results&nbsp;=&nbsp;response.getResults();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;for&nbsp;(size_t&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;results.size();&nbsp;i++)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;assume&nbsp;it&nbsp;is&nbsp;of&nbsp;data&nbsp;type&nbsp;double&nbsp;-&nbsp;other&nbsp;types&nbsp;will&nbsp;work&nbsp;similar</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OTDouble&nbsp;actualDouble&nbsp;=&nbsp;results[i].getReadOperationValue();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataValue&nbsp;actualDataValue;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value&nbsp;actualValue;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actualValue.setDouble(actualDouble);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actualDataValue.setValue(actualValue);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;provide&nbsp;the&nbsp;actual&nbsp;value&nbsp;to&nbsp;the&nbsp;client</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestHandledByCommunication[i]-&gt;setDataValue(actualDataValue);;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;complete&nbsp;the&nbsp;request&nbsp;-&nbsp;NOTE:&nbsp;the&nbsp;response&nbsp;to&nbsp;the&nbsp;client&nbsp;is&nbsp;sent&nbsp;with&nbsp;the&nbsp;last&nbsp;completed&nbsp;request&nbsp;of&nbsp;the&nbsp;transaction</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestHandledByCommunication[i]-&gt;complete();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;optionally,&nbsp;but&nbsp;recommented:&nbsp;update&nbsp;the&nbsp;cached&nbsp;value&nbsp;in&nbsp;SDK</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectPointer&lt;BaseNode&gt;&nbsp;node&nbsp;=&nbsp;requests[i]-&gt;getNode();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Only&nbsp;variables&nbsp;should&nbsp;be&nbsp;handled&nbsp;here</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node&nbsp;&amp;&amp;&nbsp;(node-&gt;getNodeClass()&nbsp;==&nbsp;EnumNodeClass_Variable))</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectPointer&lt;Server::Variable&gt;&nbsp;variableNode&nbsp;=&nbsp;static_pointer_cast&lt;Server::Variable,&nbsp;Server::BaseNode&gt;(node);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variableNode-&gt;setDataValue();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">4.</span></td><td style="border:none"><span class="f_Paragraph">Subclass the </span><a href="class_softing_o_p_c_toolbox5_1_1_creator.htm" class="topiclink">Creator</a><span class="f_Paragraph"> and override the <a href="class_softing_o_p_c_toolbox5_1_1_creator.htm#class_softing_o_p_c_toolbox5_1_1_creator_1a17e8dc576f36e58300df2f0f382eb4eb" class="topiclink">createServerReadTransaction()</a> method.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">Server::ReadTransaction*&nbsp;MyCreator::createServerReadTransaction(TBHandle&nbsp;otbHandle)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;MyReadTransaction(otbHandle);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">5.</span></td><td style="border:none"><span class="f_Paragraph">Register the creator when loading the SDK.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">MyCreator&nbsp;myCreator;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">loadToolbox(&amp;myCreator);</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Now each client read service will cause the </span><a href="class_softing_o_p_c_toolbox5_1_1_creator.htm" class="topiclink">Creator</a> to instantiate this custom MyReadTransaction.</p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_requestandtransactionmechanism.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
