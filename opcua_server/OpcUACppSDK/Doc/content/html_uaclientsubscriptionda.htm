<!DOCTYPE HTML>
<html>
<head>
   <title>Subscription to Data Changes</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_uaclientsubscriptionda.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Subscription to Data Changes</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_clientstep4.htm">Previous</a>&nbsp;
     <a href="html_clientstep4sample.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><a id="hdr"></a><span class="f_Paragraph">If a client needs to monitor the attribute value of a certain node (e.g. the value of a variable), one option is to read in the values cyclically using the <a href="html_clientstep4.htm" class="topiclink">read service</a> (polling). The other option that scales with an increasing number of monitored nodes is to use OPC UA's subscription mechanisms.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">With subscriptions, a client needs to define the attributes and the nodes that are to be monitored as well as a </span><span class="f_Reference">sampling interval</span><span class="f_Paragraph"> for each attribute and node. The sampling interval determines the interval in which the server actually looks up the value of the monitored attribute. Only if the observed value has changed since the sampling interval elapsed the last time, the value is stored in a queue. Another interval, the </span><span class="f_Reference">publishing interval</span><span class="f_Paragraph">, determines the rate at which enqueued value changes are sent to the client.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Subscribing to data changes involves two classes. <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm" class="topiclink">MonitoredItems</a> need to be created at the server for each node and attribute that is to be monitored. These objects have queues that hold the data changes that are observed on each sampling interval. One or more <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a> is required to transport the observed data changes to the client at every publishing interval. Each monitored item must be assigned to exactly one subscription.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm" class="topiclink">MonitoredItem</a> needs to be configured with (at least) the following parameters:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph" style="font-weight: bold;">NodeId</span><span class="f_Paragraph">: This is the identifier of the node (e.g. a variable) that is to be monitored</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph" style="font-weight: bold;">AttributeId</span><span class="f_Paragraph">: Refers to the attribute (e.g. the 'value' attribute) that is to be monitored</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph" style="font-weight: bold;">SamplingInterval</span><span class="f_Paragraph">: Indicates the interval in which the server monitors the attribute value. When the sampling in</span><span class="f_Paragraph">t</span><span class="f_Paragraph">erval has elapsed and the value of the monitored attribute has changed, the changed value is stored in a queue.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph" style="font-weight: bold;">QueueSize</span><span class="f_Paragraph">: The number of data changes that can be held in the queue.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph" style="font-weight: bold;">DiscardOldest</span><span class="f_Paragraph">: This parameter defines the policy for dealing with queue overflows. When this parameter is 'true', the oldest data change in the queue is discarded. Otherwise, the latest data change is discarded.</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">A </span><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a> provides the following configuration parameters:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph" style="font-weight: bold;">PublishingInterval</span><span class="f_Paragraph">: Indicates the interval in which the server publishes data changes that are stored in the queues of the associated monitored items. All data changes that have been published are removed from the queues.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph" style="font-weight: bold;">LifeTimeCount</span><span class="f_Paragraph">: </span>The server uses a life time counter to keep track of client activity for the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription" class="topiclink">Subscription</a>. The life time counter of a <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription" class="topiclink">Subscription</a> is incremented by one whenever the publishing interval expires and it is reset to zero whenever the subscription publishes a message. When the life time counter reaches the threshold defined by the <span class="f_Reference">LifeTimeCount</span>, the server deletes the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription" class="topiclink">Subscription</a> on the server. In order to prevent the subscription from being deleted when no data changes occur, the server publishes keep-alive messages when a certain number of publishing intervals have elapsed.</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span style="font-weight: bold;">MaxKeepAliveCount</span>: The server publishes keep-alive messages to inform the client that the subscription is still alive and to reset its life time counter. The keep-alive counter is incremented by one whenever the publishing interval expires and is reset to zero when the server publishes any notification message (including the keep-alive message) for the subscription. Therefore, the life time count depends on the maximum keep-alive count of the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription" class="topiclink">Subscription</a>. The life time count should always be set to at least three times the maximum keep-alive count.</td></tr></table></div><h3 class="p_Heading3"><span class="f_Heading3">Preconditions</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">Before a client can subscribe to data changes, the <a href="class_softing_o_p_c_toolbox5_1_1_application.htm" class="topiclink">Application</a> must be initialized and a connected <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm" class="topiclink">Session</a> must be available (see <a href="html_clientstep1.htm" class="topiclink">Client Tutorial Step 1</a>).</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Receive Callbacks for Subscriptions and Monitored Items</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">To be able to receive data changes from the subscription, it is necessary to define a new class which inherits from <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a> and overrides the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription_1ac71cce02fe3805a3d803c349f20bf80a" class="topiclink">Subscription::onDataChange()</a> callback. This callback receives the data changes of all <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm" class="topiclink">MonitoredItems</a> which the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a> contains. Optionally the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription_1a4f57e643dd87b67dedb59ac5ff60742a" class="topiclink">Subscription::onError()</a> and <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription_1a80192733047651957ac982e21af8cb60" class="topiclink">Subscription::onStatusChange()</a> callbacks can be overridden to be informed about subscription-related errors or changes to the connection state of the subscription.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm" class="topiclink">MonitoredItem</a> class does also provide callback methods for receiving errors or connection status changes (<a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item_1a6a91860cc726e0d7f5dc96fdbaa3e12d" class="topiclink">MonitoredItem::onError()</a> and <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item_1af7b2fbffdd3bee8873c93d9dab572429" class="topiclink">MonitoredItem::onStatusChange()</a>). If you like to receive these callbacks, please derive from this class and override the virtual methods.</span></p>
<h3 class="p_Heading3"><span class="f_Paragraph" style="font-weight: bold;">Note: </span><span class="f_Paragraph">Depending on the queue size, the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription_1ac71cce02fe3805a3d803c349f20bf80a" class="topiclink">Subscription::onDataChange()</a> callback may deliver more than one data change for the same monitored item.</span></h3>
<h3 class="p_Heading3"><span class="f_Heading3">Configuring Monitored Items</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">The following code illustrates how to configure <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm" class="topiclink">MonitoredItems</a> to monitor the 'value' attribute of a node:</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">std::vector&lt;MonitoredItemPtr&gt;&nbsp;monitoredItems;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.push_back(Client::MonitoredItem::create());</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.back()-&gt;setNodeId(monitoredNodeId);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.back()-&gt;setAttributeId(EnumAttributeId_Value);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.back()-&gt;setSamplingInterval(200);&nbsp;&nbsp;//&nbsp;the&nbsp;value&nbsp;will&nbsp;be&nbsp;sampled&nbsp;every&nbsp;200&nbsp;milliseconds</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.back()-&gt;setQueueSize(10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Enqueue&nbsp;up&nbsp;to&nbsp;10&nbsp;data&nbsp;changes</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.back()-&gt;setDiscardOldest(true);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Discard&nbsp;the&nbsp;oldest&nbsp;enqueued&nbsp;value&nbsp;on&nbsp;queue&nbsp;overflow</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.back()-&gt;setMonitoringMode(EnumMonitoringMode_Reporting);&nbsp;//&nbsp;reporting&nbsp;is&nbsp;default</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Configuring a Subscription</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">The following steps need to be performed in order to configure a <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a>:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_List">Create and configure an instance of your derived <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a> class.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">ObjectPointer&lt;MySubscription&gt;&nbsp;subscriptiption&nbsp;=&nbsp;MySubscription::create();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;setPublishingInterval(500.0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Send&nbsp;enqueued&nbsp;data&nbsp;changes&nbsp;every&nbsp;500&nbsp;milliseconds</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;setMaxKeepAliveCount(10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Send&nbsp;a&nbsp;keep-alive&nbsp;message&nbsp;after&nbsp;5000&nbsp;(=&nbsp;10&nbsp;*&nbsp;500)&nbsp;milliseconds</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;setLifeTimeCount(30);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Delete&nbsp;the&nbsp;subscription&nbsp;on&nbsp;the&nbsp;server&nbsp;after&nbsp;15000&nbsp;(=&nbsp;30&nbsp;*&nbsp;500)&nbsp;milliseconds</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;if&nbsp;the&nbsp;connection&nbsp;to&nbsp;the&nbsp;client&nbsp;is&nbsp;broken.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;setPublishingEnabled(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Enable&nbsp;publishing&nbsp;of&nbsp;data&nbsp;changes</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Assign the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a> to a <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm" class="topiclink">Session</a>.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">session-&gt;addSubscription(subscription);</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">3.</span></td><td style="border:none"><span class="f_Paragraph">Assign the monitored items that you have created previously to the subscription:</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;addMonitoredItems(monitoredItems);</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Creating the Subscription and Monitored Items on the Server</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">So far, the subscription and monitored item is only known to the client. To create those objects on the server, both classes provide </span><span class="f_FixedSize">connect()</span><span class="f_Paragraph"> methods.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The following code illustrates how use <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription_1a1c56fd491dadf4c5ed03782cb0e5ee8e" class="topiclink">Subscription::connect()</a> to create the subscription and all depending monitored items on the server:</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;connect(true);&nbsp;&nbsp;&nbsp;//&nbsp;true&nbsp;means,&nbsp;also&nbsp;connect&nbsp;the&nbsp;monitored&nbsp;items</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Please note that the server may revise some of the provided configuration parameters for the subscription.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(subscription-&gt;getRevisedPublishingInterval()&nbsp;!=&nbsp;desiredPublishingInterval)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">...&nbsp;//&nbsp;logging</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(subscription-&gt;getRevisedLifeTimeCount()&nbsp;!=&nbsp;desiredMaxLifeTimeCount)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">...&nbsp;//&nbsp;logging</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(subscription-&gt;getRevisedMaxKeepAliveCount()&nbsp;!=&nbsp;desiredMaxKeepAliveCount)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span style="width:48px">&nbsp;</span><span class="f_CodeExample">...&nbsp;//&nbsp;logging</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">Each session can have multiple subscripitons and each subscription can have multiple monitored items. To see how to add several monitored items to a single subscription and remove them piece by piece, see the <a href="html_clientstep5sample.htm" class="topiclink">Sample Application of Handling of Custom Types and Their Instances</a>.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Delete a Subscription or a Monitored Item from the Server</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">In order to stop receiving data changes for a single monitored item, simply disconnect the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm" class="topiclink">MonitoredItem</a>. If the subscription will be deleted anayways, this step can be omitted, since a monitored item cannot exist without a subscription.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItem[i]-&gt;disconnect();</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">If you want to shut down a subscription and all its depending monitored items, you can call the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription_1a8f038c04aeec692dd7bd59ce90654585" class="topiclink">disconnect()</a> method of the subscription.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;disconnect();</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">If you do not plan to re-use the disconnected <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_monitored_item.htm" class="topiclink">MonitoredItem</a> or <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a>, you need to remove their assignment to the subscription/session.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription-&gt;removeMonitoredItem(monitoredItem);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">session-&gt;removeSubscription(subscription);</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Clear the monitored items and release the reference on the subscription.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">monitoredItems.clear();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">subscription.reset();</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Modifying the Configuration of a Subscription</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">Some parameters of a <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm" class="topiclink">Subscription</a> can be modified after the subscription has been created on the server. See <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_subscription_1a412a0f70e2b06d225268574b89ddae3f" class="topiclink">Client::Subscription::update()</a> for further reference.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">See also: <a href="html_clientstep4sample.htm" class="topiclink">Sample Application</a>, <a href="html_clienttutorial.htm" class="topiclink">Client Tutorial</a></span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_uaclientsubscriptionda.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
