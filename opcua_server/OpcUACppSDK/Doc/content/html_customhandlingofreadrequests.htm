<!DOCTYPE HTML>
<html>
<head>
   <title>Custom Handling of Read Requests</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_customhandlingofreadrequests.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Custom Handling of Read Requests</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_creatingandinsertingnodes.htm">Previous</a>&nbsp;
     <a href="html_customhandlingofwriterequests.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><a id="hdr"></a><span class="f_Paragraph">In this tutorial all requests (read, write, execute) are handled synchronously, please make sure not to block these calls. For how to handle a request asynchronously, refer to the corresponding sample.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">There are two steps to the handling of read equests:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_List">Create a custom subclass of the desired Node class (e.g. BaseNode, Variable, Object ...) with an overridden <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a3ddfbea26ac50279764e0edf208e5aeb" class="topiclink">handleReadRequest()</a> method. (See also <a href="html_lifetimeoftoolkitobjects.htm" class="topiclink">Lifetime of SDK Objects</a> for how to implement the recommended </span><span class="f_FixedSize">create()</span><span class="f_List"> method for smart pointer usage)</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">class&nbsp;MyVariable&nbsp;:&nbsp;public&nbsp;Server::Variable</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">public:</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;virtual&nbsp;EnumStatusCode&nbsp;handleReadRequest(Server::ReadTransaction*&nbsp;transaction,&nbsp;Server::ReadRequest*&nbsp;request);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">};</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Implement the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a3ddfbea26ac50279764e0edf208e5aeb" class="topiclink">handleReadRequest()</a> method:</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Filter the requests to the desired </span><span class="f_Reference">Attribute</span><span class="f_Paragraph"> (usually only the </span><span class="f_Reference">Value Attribute</span><span class="f_Paragraph"> of a </span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_variable.htm" class="topiclink">Variable</a><span class="f_Paragraph">) and refer the other requests to the default implementation.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">EnumAttributeId&nbsp;attribId&nbsp;=&nbsp;request-&gt;getValueId()-&gt;getAttributeId();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(attribId&nbsp;!=&nbsp;EnumAttributeId_Value)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;return&nbsp;Server::Variable::handleReadRequest(transaction,&nbsp;request);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Check the </span><span class="f_Reference">index range</span><span class="f_Paragraph"> (applies only to arrays and indicates that the client only wants a certain part of it) and handle it properly -- if </span><span class="f_Reference">index ranges</span><span class="f_Paragraph"> shall not be supported return a Bad_IndexRangeNoData status code.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">//&nbsp;e.g.&nbsp;here&nbsp;we&nbsp;have&nbsp;a&nbsp;scalar&nbsp;value,&nbsp;no&nbsp;index&nbsp;ranges&nbsp;are&nbsp;allowed</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(request-&gt;getValueId()-&gt;getIndexRange()-&gt;getDimensions()&nbsp;!=&nbsp;0)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;DataValue&nbsp;dv;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;dv.setStatusCode(EnumStatusCode_BadIndexRangeNoData);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;readRequest-&gt;setDataValue(dv);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;readRequest-&gt;complete();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Set the <a href="class_softing_o_p_c_toolbox5_1_1_data_value.htm" class="topiclink">DataValue</a> to return, including the value, a source and a server timestamp and the operation result (status code). But first check if the server timestamp of the cached value is older than the requested maximum age (if the time since the server timestamp is smaller than maxAge then simply the cached value can be returned). The </span><span class="f_Reference">MaxAge</span><span class="f_Paragraph"> also has two predefined values with special meaning: &quot;0&quot; means to always read from the underlying system, the maximum of Int32 means to always use the cached value. The </span><span class="f_Reference">MaxAge</span><span class="f_Paragraph"> only applies only to the </span><span class="f_Reference">Value Attribute</span><span class="f_Paragraph"> of </span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_variable.htm" class="topiclink">Variables</a>.</td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">DataValue&nbsp;returnValue;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">double&nbsp;maxAge&nbsp;=&nbsp;transaction-&gt;getMaxAge();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">OTUInt64&nbsp;ulDiff&nbsp;=&nbsp;DateTime::getDurationMilliseconds(getDataValue()-&gt;getServerTimestamp(),&nbsp;DateTime::getUtcNow());</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">const&nbsp;OTUInt32&nbsp;maxVal&nbsp;=&nbsp;0x7FFFFFFF;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(maxAge&nbsp;!=&nbsp;0&nbsp;&amp;&amp;&nbsp;((maxAge&nbsp;==&nbsp;(double)maxVal)&nbsp;||&nbsp;maxAge&nbsp;&gt;&nbsp;(double)ulDiff)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//return&nbsp;the&nbsp;cached&nbsp;value</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;returnValue&nbsp;=&nbsp;getDataValue();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">else</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//get&nbsp;the&nbsp;value&nbsp;from&nbsp;the&nbsp;the&nbsp;process&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//provide&nbsp;the&nbsp;value&nbsp;to&nbsp;the&nbsp;read&nbsp;request&nbsp;and&nbsp;then&nbsp;update&nbsp;the&nbsp;cache</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//for&nbsp;a&nbsp;simple&nbsp;variable&nbsp;(like&nbsp;in&nbsp;Server_2)&nbsp;there&nbsp;is&nbsp;no&nbsp;device&nbsp;or&nbsp;process&nbsp;that&nbsp;can&nbsp;change&nbsp;the&nbsp;variable</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//so&nbsp;only&nbsp;reading&nbsp;from&nbsp;the&nbsp;cache&nbsp;is&nbsp;demonstrated&nbsp;in&nbsp;Server_2(to&nbsp;see&nbsp;how&nbsp;to&nbsp;retrieve&nbsp;a&nbsp;value&nbsp;from&nbsp;a&nbsp;device,&nbsp;please&nbsp;refer&nbsp;to&nbsp;Server_3)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;returnValue.setValue(Value(value));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;returnValue.setStatusCode(EnumStatusCode_Good);&nbsp;&nbsp;&nbsp;//&nbsp;was&nbsp;the&nbsp;read&nbsp;successful?</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//&nbsp;here&nbsp;the&nbsp;two&nbsp;timestamps&nbsp;are&nbsp;the&nbsp;same&nbsp;but&nbsp;when&nbsp;the&nbsp;time&nbsp;of&nbsp;a&nbsp;connected</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//&nbsp;device&nbsp;is&nbsp;used,&nbsp;the&nbsp;source&nbsp;timestamp&nbsp;is&nbsp;usually&nbsp;a&nbsp;bit&nbsp;older</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;returnValue.setSourceTimestamp(DateTime::getUtcNow());</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;returnValue.setServerTimestamp(DateTime::getUtcNow());</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//update&nbsp;the&nbsp;SDK&nbsp;cache&nbsp;with&nbsp;the&nbsp;&quot;new&quot;&nbsp;value</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;setDataValue(returnValue)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">//provide&nbsp;the&nbsp;data&nbsp;value&nbsp;to&nbsp;the&nbsp;client</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">request-&gt;setDataValue(&amp;returnValue);</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Complete the request.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">request-&gt;complete();</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Return from the handler with a status code.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">return&nbsp;EnumStatusCode_Good;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Create instances of this custom subclass instead of the usual class when an individual handling shall be performed.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">&nbsp;</span></h3>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">The request remains until it is completed, which is why it is very important to always complete the request.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">See also: <a href="html_customhandlingofwriterequests.htm" class="topiclink">Custom Handling of Write Requests</a>, <a href="html_serverstep3sample.htm" class="topiclink">Sample Application</a>, <a href="html_servertutorial.htm" class="topiclink">Server Tutorial</a></span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_customhandlingofreadrequests.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
