<!DOCTYPE HTML>
<html>
<head>
   <title>Variable Types</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_uainformationmodelvariabletypes.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Variable Types</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_uainformationmodelobjecttypes.htm">Previous</a>&nbsp;
     <a href="html_uainformationmodeldatatypes.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><span class="f_Paragraph">Variable node class is dedicated to provide a value to the clients. To define a variable two types must be provided:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">VariableType: which describes the type of a variable. A variable node has a HasTypeDefinition reference to its type definition (depicted as double closed and filled arrows).</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">DataType: which describes the type of the value of the variable. It is assigned to the DataType attribute.</span></td></tr></table></div><p class="p_Paragraph"><img src="ua_introduction_variabletypes.png" width="207" height="88" alt="UA_Introduction_VariableTypes" style="width:207px;height:88px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">In this section we focus on the available standard variable types, but in the next we will review standard data types.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The root for all variable types is BaseVariableType. This means that all other types must inherit from it. However, only the PropertyType and the BaseDataVariableType directly inherit from this type. Consequently, there are two independent inheritance sub-trees. </span></p>
<p class="p_Paragraph"><img src="ua_introduction_variable_hierarchy.png" width="389" height="438" alt="UA_Introduction_Variable_Hierarchy" style="width:389px;height:438px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">All of the above types have the same BaseDataType, which is abstract and defines a value that can have any valid data type. An interesting feature of these types is that even though they have an abstract data type both are concrete and therefore can be instantiated. Abstract data types do not have any encodings and cannot be exchanged on the wire; therefore the instantiated variables with an abstract data type must redefine the data type. Variables and variable types use abstract data types to indicate that their Value may be any subtype of the abstract data type. The DataType attribute can only be changed to a new data type if the new data type is a subtype of the original data type.</span></p>
<p class="p_Paragraph"><img src="ua_introduction_basedatatype.png" width="245" height="155" alt="UA_Introduction_BaseDataType" style="width:245px;height:155px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">Dividing the variables into properties and data variables has its source in two different information categories: data and metadata. For example, data can represent a signal, say pressure, and metadata describe these data and can be engineering units in this example. Of course we are not limited to the process control domain; it can be also a file content as data, and last modification time as the metadata. Both may change in time, but properties are recognized as more stable. Whereas talking about stability is useful only to better understand the semantics difference, this difference has a major impact on the data source access. </span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Usually data are obtained from smart plant-floor digital devices responsible for converting analog signals to a digital representation. Therefore, to emphasize their origin, we call them process data. </span></p>
<p class="p_Paragraph"><span class="f_Paragraph">There are many sources of metadata including a human interface, memory of smart plug and play devices, etc. Usually any change of the metadata value exposed as a property value is a result of an environment modification, e.g. a new sensor, but also a file modification.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">In spite of their role, both must have a defined type of the provided value to allow clients to interpret a stream of bits sent on the wire and obtained by a client from the server. </span></p>
<p class="p_Paragraph"><span class="f_Paragraph">It is worth stressing that, according to the specification, the inheritance chain is broken for the properties; it means that the PropertyType must not have subtypes. Additionally, it is not permitted to have a property as source of the HierarchicalReferences type or any type inherited from it. In other words properties cannot be complex. To prevent recursion, properties are also not allowed to have properties defined for them. Additionally, a node and all its properties shall always reside in the same server.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">From the inheritance tree of the standard variable types we can discover that the BaseDataVariableType is a parent only of two sets of types dedicated to: </span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">describe data types (DataTypeDictionaryType and DataTypeDescriptionType). </span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">provide diagnostic information (e.g. ServerVendorCapabilityType, ServerStatusType, etc.).</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">Users and other parts of OPC UA specification can expand the set of types presented above. For example, Part 8 of the specification defines DataItemType that derives from the BaseDataVariableType to represent any item of data. Users can create new types from the already defined ones to meet specific requirements of the application (see example case below). A detailed description of the types derived from the BaseDataVariableType is outside the scope of this chapter, but some features of this inheritance branch are worth noting. As opposed to the properties, the variables may be complex.</span></p>
<p class="p_Paragraph"><img src="ua_introduction_itemtypes.png" width="399" height="281" alt="UA_Introduction_ItemTypes" style="width:399px;height:281px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">One example of a complex variable type is the ServerStatusType shown in the figure below. Components of the complex variable can be accessed independently. The next very important feature of the variables is that new user specific types can be freely defined by deriving them from those already defined.</span></p>
<p class="p_Paragraph"><img src="ua_introduction_serverstatustype.png" width="224" height="244" alt="UA_Introduction_ServerStatusType" style="width:224px;height:244px;border:none" /></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_uainformationmodelvariabletypes.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
