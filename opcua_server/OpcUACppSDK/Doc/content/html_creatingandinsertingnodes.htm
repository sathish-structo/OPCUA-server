<!DOCTYPE HTML>
<html>
<head>
   <title>Creating and Inserting Nodes</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_creatingandinsertingnodes.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Creating and Inserting Nodes</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_serverstep2.htm">Previous</a>&nbsp;
     <a href="html_customhandlingofreadrequests.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><a id="hdr"></a><span class="f_Paragraph">The insertable Nodes include the </span><span class="f_Reference">Instance</span><span class="f_Paragraph"> Nodes and the </span><span class="f_Reference">Type Definition</span><span class="f_Paragraph"> Nodes. These Nodes can either be single Nodes or Nodes with some components, which are also Nodes.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The SDK provides C++ classes to create instances of the default OPC UA types which have certain components. The other default types are ones which have only the components which they derive from their super type. For them the class of the super type can be used by initializing it with the exact sub type definition.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">For example a folder type Node has the same configuration as the basic object type. It only has another type for distinction purposes.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Use a class and its corresponding smart pointer which comes closest to the desired type.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The code example will demonstrate how to create, configure and insert a Node of the class Variable.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Creating a Node</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">To create a Node simply create an instance of a class which is directly or indirectly derived from <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm" class="topiclink">BaseNode</a> and assign it to a smart pointer (see <a href="html_lifetimeoftoolkitobjects.htm" class="topiclink">Lifetime of SDK Objects</a>). </span></p>
<p class="p_CodeExample"><span class="f_CodeExample">Server::VariablePtr&nbsp;variable&nbsp;=&nbsp;Server::Variable::create();</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Configuring and Inserting a Node</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">What has to be configured on a Node and in which order depends a bit on the Node type and the used way how to insert the Node.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">So we first have a look on the three available methods to insert a Node, they have slightly different effects:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a1dff5e2bd626dd28db82ced27a3f7302" class="topiclink">Server::BaseNode::init()</a>: This is the usually recommended method to insert a Node. As parameter it accepts the <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> of a type definition Node to set the type definition and it automatically creates the component Nodes matching to that type. The component Nodes will get generated <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeIds</a> with GUID identifiers and the namespace of the parent Node. The </span><span class="f_Reference">Attributes</span><span class="f_Paragraph"> are also configured to match the configuration of the type definition. If a component already exists (it must be created, inserted to the address space and referenced), it will be used instead of creating a new one.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a29029be7213e42062606bbe8834b3a8f" class="topiclink">Server::BaseNode::insert()</a>: This method inserts a Node to the address space as it is. The user has to take care to create and insert necessary components and add references to them and to the type definition Node.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1ad58bb8f81f995ed0bd701143eb1db538" class="topiclink">Server::BaseNode::insertTree()</a>: This method works almost like the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a29029be7213e42062606bbe8834b3a8f" class="topiclink">insert()</a> method, but it additionally searches for hierarchical references (e.g. </span><span class="f_Reference">HasComponent</span><span class="f_Paragraph">) and inserts the found Nodes which are not yet in the address space.</span></td></tr></table></div><h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">If you wish to add Nodes or trees to an existing tree in the address space, adding a forward refernce from the existing node to the new node will automatically insert the new node to the address space.</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_List">Common to all Nodes, the Attributes shall be configured. For the basic purposes only the <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a>, the </span><span class="f_Reference">DisplayName</span><span class="f_List">, the </span><span class="f_Reference">BrowseName</span><span class="f_List"> and a reference from a super Node should be set. For variables the data type should also be set. The </span><span class="f_Reference">Description</span><span class="f_List"> is optional and the </span><span class="f_Reference">WriteMask</span><span class="f_List"> is only needed in certain cases. If it is wished to write the value of the variable, the AccessLevel should be configured, as well (default is read-only). The <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a> has to be set before inserting the Node to the address space.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">variable-&gt;setNodeId(NodeId(namespaceIndex,&nbsp;identifier));&nbsp;//the&nbsp;identifier&nbsp;can&nbsp;either&nbsp;be&nbsp;a&nbsp;string&nbsp;or&nbsp;numeric&nbsp;identifier,&nbsp;as&nbsp;long&nbsp;as&nbsp;it&nbsp;is&nbsp;unique&nbsp;globally</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">variable-&gt;setDataType(Statics::DataTypeId_Double);&nbsp;//as&nbsp;an&nbsp;example</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">variable-&gt;setBrowseName(QualifiedName(name,&nbsp;namespaceIndex));&nbsp;//use&nbsp;the&nbsp;same&nbsp;namespaceIndex&nbsp;as&nbsp;for&nbsp;the&nbsp;NodeId;&nbsp;the&nbsp;name&nbsp;should&nbsp;be&nbsp;a&nbsp;string</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">variable-&gt;setDisplayName(LocalizedText(name,&nbsp;_T(&quot;en&quot;)));&nbsp;//the&nbsp;name&nbsp;should&nbsp;be&nbsp;a&nbsp;string&nbsp;and&nbsp;can&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;for&nbsp;the&nbsp;browse&nbsp;name</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">variable-&gt;setDescription(LocalizedText(_T(&quot;A&nbsp;test&nbsp;variable&quot;),&nbsp;_T(&quot;en&quot;)));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">variable-&gt;setAccessLevel(EnumAccessLevel&nbsp;|&nbsp;EnumAccessLevel);&nbsp;//default&nbsp;is&nbsp;read-only</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">//additionally,&nbsp;the&nbsp;initial&nbsp;value&nbsp;of&nbsp;the&nbsp;variable&nbsp;can&nbsp;be&nbsp;set</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">DataValue&nbsp;initialDataValue;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">initialDataValue.setValue(Value(OTDouble(5.0)));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">variable-&gt;setDataValue(initialDataValue);</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Insert the Node. Here we initialize the variable as BaseDataVariableType (other types may produce sub-nodes).</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">result&nbsp;=&nbsp;variable-&gt;init(Statics::VariableTypeId_BaseDataVariableType);</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">3.</span></td><td style="border:none"><span class="f_Paragraph">If the Node has properties (</span><span class="f_Reference">Variable</span><span class="f_Paragraph"> Nodes containing additional information) they also must usually be configured (see the API description of the used class for details). Since they are Nodes too, they must be created first by using <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a1dff5e2bd626dd28db82ced27a3f7302" class="topiclink">init()</a> or manually.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">4.</span></td><td style="border:none"><span class="f_Paragraph">Add a reference from an existing object in the address space (e.g. the 'Objects' folder).</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">result&nbsp;=&nbsp;Server::AddressSpaceRoot::instance()-&gt;getObjectsFolder()-&gt;addReference(Statics::ReferenceTypeId_Organizes,&nbsp;variable);</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">How to create a custom OPC UA type (object type, event type ...) by inserting Nodes to the type tree and what needs to be considered when creating instances of a custom type, see <a href="html_creatingcustomtypes.htm" class="topiclink">Creating Custom Types</a>.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">The <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a1dff5e2bd626dd28db82ced27a3f7302" class="topiclink">init()</a> method only inserts the current Node and the automatically created component Nodes to the address space. Manually created components must also be inserted manually.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">If some components of a Node shall get a specific <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeId</a>, it is a good way to create these components first, giving them the desired ID and adding the appropriate reference from the Node to the components and inserting them using <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a29029be7213e42062606bbe8834b3a8f" class="topiclink">insert()</a>. After that use the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_base_node_1a1dff5e2bd626dd28db82ced27a3f7302" class="topiclink">init()</a> method on the Node to create and insert the Node and the remaining components.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">If it is desired to use generated <a href="class_softing_o_p_c_toolbox5_1_1_node_id.htm" class="topiclink">NodeIds</a> for the created Nodes, the method <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_address_space_root.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_address_space_root_1a2069f1766d72f28dafd2960ffae7a217" class="topiclink">Server::AddressSpaceRoot::createNodeId()</a> can be used. </span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_address_space_root.htm" class="topiclink">AddressSpaceRoot</a> is one of the singleton classes and can be accessed by<span class="f_Paragraph"> <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_address_space_root.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_address_space_root_1a591c2444e340bb9ef7b2d2939012b403" class="topiclink">AddressSpaceRoot::instance()</a>.</span></p>
<p>&nbsp;</p>
<p class="p_Paragraph"><span class="f_Paragraph">See also: <a href="html_creatingcustomtypes.htm" class="topiclink">Creating Custom Types</a>, <a href="html_serverstep2sample.htm" class="topiclink">Sample Application</a>, <a href="html_servertutorial.htm" class="topiclink">Server Tutorial</a></span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_creatingandinsertingnodes.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
