<!DOCTYPE HTML>
<html>
<head>
   <title>Asynchronous Access</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_sampleasynchronousaccess.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Asynchronous Access</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_sampleuseraccesscontrol.htm">Previous</a>&nbsp;
     <a href="html_sampleauditevents.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><a id="hdr"></a><span class="f_Paragraph">This sample shows how a server can handle requests in a non-blocking way.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">A client can invoke services without being blocked until the request is completed.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">OPC UA C++ Server &amp; Client SDK V6.00 provides support for both non-blocking handling at server side and asynchronous client services.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Where to Find</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">The projects for this sample are located in the directory: &quot;</span><span class="f_FixedSize">&lt;InstallDir&gt;/Apps/Samples/Cpp/AsynchronousAccess</span><span class="f_Paragraph">&quot;. While the subdirectory &quot;</span><span class="f_FixedSize">AsynchronousAccessClient</span><span class="f_Paragraph">&quot; contains source for the client, the server project for non-blocking execution can be found in &quot;</span><span class="f_FixedSize">AsynchronousAccessServer</span><span class="f_Paragraph">&quot; subdirectory.</span></p>
<h2 class="p_Heading2"><span class="f_Heading2">Server Implementation</span></h2>
<p class="p_Paragraph"><span class="f_Paragraph">Non-blocking implementation for read and write services can be found at implementation of handleReadRequest and handleWriteRequest in SampleVariable.cpp.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Points of Interest</span></h3>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Extend <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_variable.htm" class="topiclink">Server::Variable</a> and overwrite the methods </span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_variable.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_variable_1a2418b27d471d1c8ca13348aa2c709059" class="topiclink">handleReadRequest</a><span class="f_Paragraph"> and </span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_variable.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_variable_1a40756a6f376a2389749499cf4a1c1805" class="topiclink">handleWriteRequest</a> <span class="f_Paragraph">to interfere.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Store the requests always as smart pointer (e.g. </span><a href="class_softing_o_p_c_toolbox5_1_1_object_pointer.htm#class_softing_o_p_c_toolbox5_1_1_object_pointer" class="topiclink">ObjectPointer</a>&lt; <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_read_request.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_read_request" class="topiclink">Server::ReadRequest</a> &gt;<span class="f_Paragraph">) for asynchronous processing (see AsyncActionHandler.h).</span><br />
<span class="f_Paragraph">Only by storing smart pointers it is ensured that the pointer still exists when processing is finished.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Do never forget to invoke the complete (</span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_data_request.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_data_request_1a5696acd53a042e30ff7d3be86ab46814" class="topiclink">DataRequest::complete</a><span class="f_Paragraph">) method when processing is finished.</span><br />
<span class="f_Paragraph">Not completed requests cause pending response to the client and keep the transactions alive (memory leaks).</span><br />
<span class="f_Paragraph">Invocation of default handler completes requests anyway.</span><br />
<span class="f_Paragraph">Multiple completion of requests does not harm.</span></td></tr></table></div><h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<h3 class="p_Heading3"><span class="f_Paragraph">In this sample the handling of requests is simply stored in a matching action (e.g. AsyncReadAction) and passed to a thread, which delays execution.</span><br />
<span class="f_Paragraph">The execution is finally performed in context of a handler thread (but simply using the SDK cache value).</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">A real application would typically</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">store request (and some cookie) in a list of open requests</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">invoke asynchronous communication to an underlying device (using the cookie)</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">Once asynchronous communication to underlying device is answered, the application would</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">search the open request using the cookie returned by underlying communication</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">provide results from underlying communication to the request (e.g. </span><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_read_request.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_read_request_1aab9ad6543090d875783b0769cf18d0a9" class="topiclink">ReadRequest::setDataValue</a>)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none">complete the request and remove it from the list of open requests</td></tr></table></div><p class="p_Paragraph">Also timeouts within underlying communication shall be handled correctly (i.e. setting status code to request and completing it)<br />
&nbsp;</p>
<p class="p_Paragraph"><span class="f_Paragraph">Other services may be treated similar (historyRead) or by directly deriving from the matching transaction object (e.g. <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_browse_transaction.htm" class="topiclink">Server::BrowseTransaction</a>) and implementing the handleRequests method.</span></p>
<h2 class="p_Heading2"><span class="f_Heading2">Client Implementation</span></h2>
<p class="p_Paragraph"><span class="f_Paragraph">Asynchronous services are started with methods on the <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm" class="topiclink">Client::Session</a> class. The list of asynchronous services are:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1aa3b1480df8dda6f30e5e4890780b4c78" class="topiclink">readAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1ac8bf001061e105065231b8611476a077" class="topiclink">writeAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a34341875d6b2a5d6c44a4736a928d994" class="topiclink">browseAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a33d7ddb62a7ceab02dafeed3e81f2818" class="topiclink">browseNextAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1afbe4a8446f61d65051c0f281316692c6" class="topiclink">callMethodsAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a6af308e33dc7c592f06bcb46dbd28b44" class="topiclink">historyReadRawAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a610c961ba346ccfd6b8f8c7897c50a45" class="topiclink">historyReadProcessedAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a6ce2018dd5f08cc61a05e8504cb783e9" class="topiclink">historyReadEventAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1aafae663a418c4a2b16c52a37b64a7bb6" class="topiclink">queryFirstAsync</a></span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1ac9f5ea72f21046b384191ccc28665ce5" class="topiclink">queryNextAsync</a></span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">Once the asynchronous call is completed, the matching handler methods (e.g. <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a877957a5c42a1fec1464e37d90d9b797" class="topiclink">onReadComplete</a>, <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a15d7088b6b3c2cf4c2eae2a027fc0169" class="topiclink">onWriteComplete</a>, ...) are invoked.</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Running the Sample</span></h3>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">The client and server need an existing application instance certificate and it must be in the correct directory. See <a href="html_setupcertificates.htm" class="topiclink">Setting up a Certificate Store</a> for how to create the demo certificate store. The path to the certificate is specified at the top of </span><span class="f_FixedSize">AsynchronousAccessServer.cpp </span><span class="f_Paragraph">and</span><span class="f_FixedSize"> AsynchronousAccessClient.cpp</span><span class="f_Paragraph">, adapt it if it doesn't fit.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Compile and start the sample applications </span><span class="f_Reference">AsynchronousAccessServer</span><span class="f_Paragraph"> and </span><span class="f_Reference">AsynchronousAccessClient</span><span class="f_Paragraph">. Run the client application in the debugger and step through the code.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">After connecting the client with the command &quot;</span><span class="f_Reference">co</span><span class="f_Paragraph">&quot;, start asynchronous services using the &quot;</span><span class="f_FixedSize">st</span><span class="f_Paragraph">&quot; command. The result of the service will be received asynchronously.</span><br />
<span class="f_Paragraph">The client is not blocked &nbsp;while the request is waiting for a response.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Optionally cancel the started requests using the &quot;</span><span class="f_FixedSize">cn</span><span class="f_Paragraph">&quot; command.</span></td></tr></table></div><h3 class="p_Heading3"><span class="f_Heading3">Points of Interest</span></h3>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Extend <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm" class="topiclink">Client::Session</a> and overwrite the methods <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a877957a5c42a1fec1464e37d90d9b797" class="topiclink">onReadComplete</a>, <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a15d7088b6b3c2cf4c2eae2a027fc0169" class="topiclink">onWriteComplete</a> and <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1aaf870e2c5d9cd10f3c6e72963d459121" class="topiclink">onBrowseComplete</a> to check the results of the asynchronous actions.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Cancelling asynchronous requests by the method <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1ae3a0a772675a23519d7c1ff0849eb360" class="topiclink">Client::Session::cancelTransaction</a> using a transaction ID of the asynchronous calls.</span></td></tr></table></div><h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">The handler methods of asynchronous services (e.g. <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a877957a5c42a1fec1464e37d90d9b797" class="topiclink">onReadComplete)</a> may be invoked before the method starting the asynchronous service returns.</span><br />
<span class="f_Paragraph">So ensure that the cookie passed in the transaction handle is available to the handler method before starting the asynchronous service.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The class &quot;SampleVariable&quot; extending <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_variable.htm" class="topiclink">Server::Variable</a> is added in the server project.</span><br />
<span class="f_Paragraph">This is done only to delay the request processing in the server. Otherwise cancelling of requests cannot be demonstrated.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The sample is for demonstration purpose only.</span><br />
<span class="f_Paragraph">Especially the usage of threads and synchronization objects should be done in a different way for real world applications.</span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_sampleasynchronousaccess.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
