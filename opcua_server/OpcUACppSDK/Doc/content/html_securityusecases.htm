<!DOCTYPE HTML>
<html>
<head>
   <title>Use Cases</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_securityusecases.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Use Cases</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_securityopcuasecurity.htm">Previous</a>&nbsp;
     <a href="html_securitytechnicaldetails.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><span class="f_Paragraph">Security use cases are divided between those associate with developers and those for the end user that is deploying or using an OPC UA server or client application.</span></p>
<h2 class="p_Heading2"><span class="f_Heading2">Developer Building an OPC UA Application</span></h2>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Question:</span><span class="f_Paragraph"> A developer wants to create an OPC UA server that will support security. What does the developer have to do? How much work will it be? The server is a simple OPC UA server that only supports DA type data exchange and simple eventing.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Answer:</span><span class="f_Paragraph"> The developer has selected a .NET SDK / toolkit. The SDK has built in support for communication security, connection security and the interchange of application information. The developer will have to setup the application definition information in the SDK. This is the information that will be part of an application instance certificate. The developer will have to enable user level security and select the type of user security that is desired. The developer will have to program the object level security that it desires (the user information is available from the establishment of the communications). In general most security is provided by the SDK (and underling communications stack). The developer may have to add any additional Audit Events, beyond what is automatically generated by the SDK. The SDK provides Audit Events for standard services. </span></p>
<h2 class="p_Heading2"><span class="f_Heading2">Generating Installations</span></h2>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Question:</span><span class="f_Paragraph"> An OPC Foundation member wants to sell an OPC UA application and is generating an installation program for the server application. What special tasks should the installation program perform?</span></p>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Answer:</span><span class="f_Paragraph"> The installation program will vary according to the application and the tools used to generate the application (.NET, C++, “C”, Java), but in all cases the installation program or application on installation should be able to generate instance specific application certificates and the corresponding public and private keys. The installation or application must also be able to accept an end user provided certificate and public / private key. The application must securely store the private key and be able to use the certificate containing the public key as its application instance certificate.  &nbsp; &nbsp; &nbsp; &nbsp;</span></p>
<h2 class="p_Heading2"><span class="f_Heading2">Developer Security Question</span></h2>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Question:</span><span class="f_Paragraph"> A developer noticed that OPC UA uses a symmetric algorithm for communication once a session is established - why? Why not user asymmetric algorithms?</span></p>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Answer:</span><span class="f_Paragraph"> When designing OPC UA security was always considered, but performance was also a goal. OPC UA needed to perform at least as well as OPC DCOM applications. When testing OPC UA applications it became apparent that a secure communication similar to SSL handshake protocol used in the banking industry was very secure, but also slow. This type of asymmetric algorithms required too much overhead. Symmetric algorithms proved to provide better performance, but they required an interchange of information to ensure a secure communication.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The asymmetric algorithm uses a pair of simultaneously generated keys. The first is secret and can be used to digitally sign a document, e.g. a message, to make it non-repudiated and to protect its content integrity. Because it must be hidden safely by the owner, it is called private. The other one, called public, is used to encrypt a document to keep it secret for third parties. It must be published to allow everyone to encrypt the content while sending a document over an unprotected network. The public key is also used to validate the data integrity and document author.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The public key must be available publicly, and therefore should be distributed without any limitations. Nevertheless, it does not mean wild broadcasting. Public and private keys are just two coupled but random streams of bits and, therefore, cannot provide information about the owner. Firm coupling of the keys and their owner authenticity is necessary for the data authentication validation. Additionally, the streams are not self protected, and, thus, may be vulnerable to modification by a third party. To control the distribution of the public keys, they are located in certificates that are documents containing additional information helpful to recognize their owners, validate their scope of use and expiration date. The certificate is a document and, again, its authentication and integration may be questioned. To deal with this uncertainty, the certificate must be signed by someone credible (called Certification Authority (CA)), who needs to use his private key to attach a signature and public keys to check authenticity. Finally a CA must have also a certificate. It looks like a circular reference problem. </span></p>
<p class="p_Paragraph"><span class="f_Paragraph">To break the circle, there must be at least one preconfigured certificate that can be used to verify the trust chain. It may be the first one making the solution extremely simple, but still durable. For a global solution, keeping all potentially relevant certificates in local storage is impractical or even impossible. For this case, the CA’s are connected in a tree structure. To make sure that a presented certificate is valid, we simply must check, step by step, the trust path starting from the certificate in question and finishing after recognition of the predefined, well-known CA, whose certificate can be obtained from the local storage. In this case, this well-known trusted certificate plays the role of an anchor. This concept is called public key infrastructure (PKI). </span></p>
<p class="p_Paragraph"><span class="f_Paragraph">A very important advantage of the asymmetric cipher algorithms is that they can send secured information using unsecured wire. This way, a session key for a symmetric cipher algorithm can be sent initially using the public key to scramble it. After having a symmetric key on both sides, communication can use it for further efficient and secure data transfer without the necessity (and overhead) of using PKI.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Since OPC UA communications may be very long running, a symmetric communication channel must be renewed with new information to ensure that an observer cannot collect enough information to discover the symmetric keys. OPC UA includes such a “renew” period to guard against this type of attack.</span></p>
<h2 class="p_Heading2"><span class="f_Heading2">Deploying an OPC UA Application at a Site</span></h2>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Question:</span><span class="f_Paragraph"> A vendor has an OPC UA server that is to be installed and configured at an end users facility. What action should the vendor perform at the site? And how should the vendor build his application to allow for easy configuration?</span></p>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Answer:</span><span class="f_Paragraph"> OPC Foundation has developed a configuration tool that can be used to assist an end user or vendor in configuring OPC UA applications. The vendor should build his application to support the OPC UA Configuration Tool (also known as the OPC UA Certificate Tool). This tool allows end users to use the same tool for all OPC UA applications with regard to certificate configuration. This tool and information regarding it are available as part of the OPC Foundation SDK.</span></p>
<h2 class="p_Heading2"><span class="f_Heading2">End User Wants to Have Domain Certificates</span></h2>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Question:</span><span class="f_Paragraph"> A vendor has provided an end user with an OPC UA client application which is to be deployed at a large end users site. Instances of the application will be executing on multiple distributed machines. They will be communicating to multiple OPC UA servers hosted on multiple machines. The plant site is distributed over a large physical area with OPC UA clients and OPC UA servers at great distance from one another. What should the end user and vendor do to allow so easy installation of the application?</span></p>
<p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Answer:</span><span class="f_Paragraph"> The vendor software must allow for end user generated application instance certificates. The end user should configure all OPC UA servers in the system to allow connections from any application which have instance certificates generated by the end users domain (also termed certificate chaining). This is accomplished by registering the domain as a trusted domain. The applications are installed and then configured / assigned a unique application instance certificate that is generated by the end user (usually by an IT resource). Once the application instance certificate is assigned to the application, it will automatically be able to communicate with all of the OPC UA servers deployed at the site. Without the domain based application instance server all instances of all OPC UA clients would have to have their instance certificate added to each of the OPC UA servers as a trusted application, which in a large plant would be very difficult and tiresome to do.</span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_securityusecases.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
