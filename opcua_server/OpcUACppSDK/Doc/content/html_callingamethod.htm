<!DOCTYPE HTML>
<html>
<head>
   <title>Calling a Method</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_callingamethod.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Calling a Method</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_clientstep6.htm">Previous</a>&nbsp;
     <a href="html_clientstep6sample.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><a id="hdr"></a><span class="f_Paragraph">A server can define methods in its address space which can be called by OPC UA clients. A method is triggered by a client and is executed on a server. As with classes in object-oriented programming, a method in OPC UA is always defined in the context of an object node in the address space. Methods can have both input and output arguments.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm" class="topiclink">Session</a> class provides three methods to call an OPC UA method:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a22cd02cee6686e5d8e19a3a780d4e368" class="topiclink">Client::Session::callMethods()</a>: This method allows clients to call several methods in the address space at once.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a513d89d17bcb7f9109009e87a60b1a2b" class="topiclink">Client::Session::callMethod()</a>: A convenience method to call a single method in the address space.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1afbe4a8446f61d65051c0f281316692c6" class="topiclink">Client::Session::callMethodsAsync()</a>: This method allows clients invoke methods in the address space asynchronously. Please refer to <a href="html_sampleasynchronousaccess.htm" class="topiclink">Asynchronous Access</a> for further reference.</span></td></tr></table></div><h3 class="p_Heading3"><span class="f_Heading3">Preconditions</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">Before a client is able to call methods on a server, the <a href="class_softing_o_p_c_toolbox5_1_1_application.htm" class="topiclink">Application</a> must be initialized and a connected <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm" class="topiclink">Session</a> must be available (see <a href="html_clientstep1.htm" class="topiclink">Client Tutorial Step 1</a>).</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">The Call Service</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">To call a method on a server, the client needs to know about the method's signature, i.e. its input and output arguments. These arguments are exposed by the property variables </span><span class="f_FixedSize">InputArguments</span><span class="f_Paragraph"> and </span><span class="f_FixedSize">OutputArguments</span><span class="f_Paragraph">. Therefore, if the client does not know the signature by configuration, it needs to browse the method for its arguments.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The following steps are required to call several methods:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_List">Create and configure a <a href="class_softing_o_p_c_toolbox5_1_1_call_method_request.htm" class="topiclink">CallMethodRequest</a> object with</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">the <a href="class_softing_o_p_c_toolbox5_1_1_i_node_id.htm" class="topiclink">NodeId</a> of the method node,</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">the <a href="class_softing_o_p_c_toolbox5_1_1_i_node_id.htm" class="topiclink">NodeId</a> of the object to which the method belongs, and</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">appropriate arguments.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">std::vector&lt;CallMethodRequest&gt;&nbsp;allRequests;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">CallMethodRequest&nbsp;currentRequest;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">std::vector&lt;Value&gt;&nbsp;inputArguments;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">currentRequest.setObjectId(&amp;objectOfMethod);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">currentRequest.setMethodId(&amp;methodId);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">Value&nbsp;inpArg0&nbsp;=&nbsp;value;&nbsp;//value&nbsp;of&nbsp;the&nbsp;input&nbsp;argument</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">currentRequest.addInputArgument(&amp;inpArg0);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">...&nbsp;&nbsp;&nbsp;//&nbsp;further&nbsp;input&nbsp;arguments</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">allRequests.push_back(currentRequest);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">...&nbsp;&nbsp;&nbsp;//&nbsp;further&nbsp;methods</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Call the service.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">std::vector&lt;CallMethodResult&gt;&nbsp;methodResults;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">result&nbsp;=&nbsp;session-&gt;callMethods(allRequests,&nbsp;methodResults);</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">3.</span></td><td style="border:none"><span class="f_Paragraph">Check the results of the service call. The results are wrapped in a <a href="class_softing_o_p_c_toolbox5_1_1_call_method_result.htm" class="topiclink">CallMethodResult</a> object.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">for(size_t&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;methodResults.size();&nbsp;i++)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//&nbsp;call&nbsp;result</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;if(StatusCode::isGood(methodResults[i].getStatusCode()))</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(size_t&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;methodResults[i].getOutputArgumentCount();&nbsp;j++)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;outArg0;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;methodResults[i].getOutputArgument(j)-&gt;getDouble(&amp;outArg0);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">If the method call fails, it can be useful to check the results of <a href="class_softing_o_p_c_toolbox5_1_1_i_call_method_result.htm#class_softing_o_p_c_toolbox5_1_1_i_call_method_result_1a75f1b3d4a7ad3b1ed3d2bcb34e29e9aa" class="topiclink">CallMethodResult::getInputArgumentResults()</a>. The returned array contains the validation results for the provided input arguments.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">The server may restrict the execution of methods to certain users.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">The method <a href="class_softing_o_p_c_toolbox5_1_1_client_1_1_session.htm#class_softing_o_p_c_toolbox5_1_1_client_1_1_session_1a513d89d17bcb7f9109009e87a60b1a2b" class="topiclink">Client::Session::callMethod()</a> takes the input arguments and the NodeIds of the object and the method directly as input parameters and returns the output arguments, the input argument status codes and the call result (StatusCode).</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">See also: <a href="html_clientstep5sample.htm" class="topiclink">Sample Application</a>, <a href="html_clienttutorial.htm" class="topiclink">Client Tutorial</a></span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_callingamethod.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
