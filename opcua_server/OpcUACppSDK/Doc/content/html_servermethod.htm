<!DOCTYPE HTML>
<html>
<head>
   <title>Calling a Custom UA Method</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_servermethod.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Calling a Custom UA Method</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_serverstep4.htm">Previous</a>&nbsp;
     <a href="html_serverstep4sample.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <h3 class="p_Heading3"><a id="hdr"></a><span class="f_Paragraph">OPC UA <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Methods</a> are intended to be used for actions other than just accessing a value or to access several values simultaneously in the same context. (It is also possible to access several values with the read and write services but it is not possible to know if the Nodes belong together, so they can not be accessed simultaneously in the same context.)</span></h3>
<h3 class="p_Heading3"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Methods</a> are always bound to an <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm" class="topiclink">Object</a>. A <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Method</a> always returns a </span><span class="f_Reference">StatusCode</span><span class="f_Paragraph">, indicating if the service succeeded but additionally it can have any number of input arguments and output arguments.</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Calling a UA <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Method</a> consists of these steps:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Creating a <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Method</a> instance</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">Overriding the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_object_1adcbd8233803195b9106191b411a35f47" class="topiclink">handleCallRequest()</a> method of the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm" class="topiclink">Object</a></span></td></tr></table></div><h3 class="p_Heading3"><span class="f_Heading3">Creating a Method Instance</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph"><a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Methods</a> are stateless which means that it gets all necessary information when it is called, this includes the information of the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm" class="topiclink">Object</a> for which the method is called.</span><br />
<span class="f_Paragraph">Because of this behavior it is typical to create the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Method</a> once when creating the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object_type.htm" class="topiclink">ObjectType</a> and reference it by all corresponding <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm" class="topiclink">Objects</a> -- this can save a lot of memory.</span><br />
<span class="f_Paragraph">See <a href="html_creatingcustomtypes.htm" class="topiclink">Creating Custom Types</a>.</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_List">Create the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Method</a> Node and set the common Attributes (see also <a href="html_creatingandinsertingnodes.htm" class="topiclink">Creating and Inserting Nodes</a>)</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">Server::MethodPtr&nbsp;method&nbsp;=&nbsp;Server::Method::create();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">method-&gt;setBrowseName(QualifiedName(_T(&quot;MyMethod&quot;),&nbsp;namespaceIndex));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">method-&gt;setDisplayName(LocalizedText(_T(&quot;A&nbsp;UA&nbsp;method&quot;),&nbsp;_T(&quot;en&quot;)));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">method-&gt;setNodeId(NodeId(namespaceIndex,&nbsp;_T(&quot;MyMethodId&quot;)));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">//&nbsp;set&nbsp;a&nbsp;modelling&nbsp;rule&nbsp;since&nbsp;it&nbsp;is&nbsp;a&nbsp;component</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">NodeId&nbsp;mandatoryRule(EnumNumericNodeId_ModellingRule_Mandatory);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">method-&gt;addReference(Statics::ReferenceTypeId_HasModellingRule,&nbsp;Server::AddressSpaceRoot::instance()-&gt;getNode(&amp;mandatoryRule));</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Set the Method to be executable.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">method-&gt;setExecutable(true);</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">3.</span></td><td style="border:none"><span class="f_Paragraph">Define the input and output arguments -- they are extra Nodes which display how the arguments shall look like. If the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Method</a> shall have no input or output arguments, the corresponding calls can be left out.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">std::vector&lt;Argument&gt;&nbsp;inputArgs;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;is&nbsp;a&nbsp;special&nbsp;structure&nbsp;foreseen&nbsp;for&nbsp;argument&nbsp;descriptions</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">std::vector&lt;Argument&gt;&nbsp;outputArgs;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">Argument&nbsp;currentArgument;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">currentArgument.setDataType(NodeId(0,&nbsp;EnumDataTypeId_UInt32));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">currentArgument.setName(_T(&quot;ExampleValue&quot;));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">currentArgument.setDescription(LocalizedText(_T(&quot;For&nbsp;example&nbsp;purposes.&quot;),&nbsp;_T(&quot;en&quot;)));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">currentArgument.setValueRank(ValueRank_Scalar);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">inputArgs.push_back(currentArgument);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">...&nbsp;//&nbsp;more&nbsp;input&nbsp;arguments</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">NodeId&nbsp;tmpNodeId(namespaceIndex,&nbsp;_T(&quot;methodId_InputArguments&quot;));</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">method-&gt;setInputArguments(&amp;tmpNodeId,&nbsp;inputArgs);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">...&nbsp;//&nbsp;the&nbsp;similar&nbsp;procedure&nbsp;for&nbsp;the&nbsp;output&nbsp;arguments</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:18px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">4.</span></td><td style="border:none"><span class="f_Paragraph">Finally add a reference from the containing <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm" class="topiclink">Object</a> to the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method.htm" class="topiclink">Method</a> (this will also insert the method into the address space).</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">myObject-&gt;addReference(Statics::ReferenceTypeId_HasComponent,&nbsp;myMethod);</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">When creating instances of the corresponding <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm" class="topiclink">Objects</a> the init() service will add the Method to the object automatically, if a mandatory or optional modelling rule is used. </span></p>
<p class="p_Paragraph"><span class="f_Paragraph">&nbsp;</span></p>
<p class="p_Paragraph"><span class="f_Heading3">Overriding the handleCallRequest() method of the Object</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_Paragraph"> Derive the object, that is to be handled from the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm" class="topiclink">Object</a> class and override the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_object_1adcbd8233803195b9106191b411a35f47" class="topiclink">handleCallRequest()</a> method:</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">class&nbsp;MyObject&nbsp;:&nbsp;:&nbsp;public&nbsp;SoftingOPCToolbox5::Server::Object</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">...</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">public:</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">virtual&nbsp;void&nbsp;handleCallRequest(SoftingOPCToolbox5::Server::MethodCallTransaction*&nbsp;transaction,&nbsp;SoftingOPCToolbox5::Server::MethodCallRequest*&nbsp;request);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">};</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph"> Implement the  <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_object.htm#class_softing_o_p_c_toolbox5_1_1_server_1_1_object_1adcbd8233803195b9106191b411a35f47" class="topiclink">handleCallRequest()</a>:</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 13px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Check if the method that was called, is known and check the given input arguments to match the desired amount, data types and order. </span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">EnumStatusCode&nbsp;result;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if&nbsp;(request-&gt;getMethodId()-&gt;compare(myMethodNode)&nbsp;!=&nbsp;0)&nbsp;//&nbsp;do&nbsp;not&nbsp;use&nbsp;!=&nbsp;operator,&nbsp;it&nbsp;will&nbsp;compare&nbsp;the&nbsp;pointers</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//&nbsp;An&nbsp;unknown&nbsp;method&nbsp;was&nbsp;invoked</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;//&nbsp;Let&nbsp;the&nbsp;SDK&nbsp;do&nbsp;the&nbsp;handling&nbsp;(will&nbsp;also&nbsp;complete&nbsp;the&nbsp;request)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;return&nbsp;Server::Object::handleCallRequest(transaction,&nbsp;request);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">std::vector&lt;Value&gt;&nbsp;inputArguments&nbsp;=&nbsp;request-&gt;getInputArguments();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(StatusCode::isGood(request-&gt;getStatusCode()))</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;std::vector&lt;EnumStatusCode&gt;&nbsp;inputArgumentResults;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;validateInputArguments(inputArguments,&nbsp;inputArgumentResults);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;if(StatusCode::isBad(result))</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request-&gt;setInputArgumentResults(inputArgumentResults);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">if(StatusCode::isGood(result))</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;//&nbsp;proceed&nbsp;with&nbsp;the&nbsp;method&nbsp;handling</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 13px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Courier New';color:#000000;">o</span></td><td style="border:none"><span class="f_Paragraph">Assign the operation result of the method call and complete the request. This call can even be made asynchronously after the request handler returned.</span></td></tr></table></div><p class="p_CodeExample"><span class="f_CodeExample">//&nbsp;we&nbsp;assume&nbsp;the&nbsp;variable&nbsp;&quot;EnumStatusCode&nbsp;result&quot;&nbsp;is&nbsp;defined</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">request-&gt;setStatusCode(result)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">request-&gt;complete();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">//&nbsp;no&nbsp;return&nbsp;value&nbsp;since&nbsp;handleCallRequest()&nbsp;is&nbsp;a&nbsp;void</span></p>
<h3 class="p_Heading3"><span class="f_Heading3">Note:</span></h3>
<p class="p_Paragraph"><span class="f_Paragraph">As it is unlikely that several method calls are performed within the same method call service, we only show the way to handle single <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method_call_request.htm" class="topiclink">MethodCallRequests</a>. If it is desired to override the handling of a <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method_call_transaction.htm" class="topiclink">MethodCallTransaction</a> have a look at <a href="html_requestandtransactionmechanism.htm" class="topiclink">Request and Transaction Mechanism</a> for how to handle complete </span><span class="f_Reference">Transactions</span><span class="f_Paragraph">, the <a href="class_softing_o_p_c_toolbox5_1_1_server_1_1_method_call_transaction.htm" class="topiclink">MethodCallTransaction</a> can be handled similarly.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">See also: <a href="html_serverstep2sample.htm" class="topiclink">Sample Application</a>, <a href="html_servertutorial.htm" class="topiclink">Server Tutorial</a>, <a href="html_requestandtransactionmechanism.htm" class="topiclink">Request and Transaction Mechanism</a></span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_servermethod.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
