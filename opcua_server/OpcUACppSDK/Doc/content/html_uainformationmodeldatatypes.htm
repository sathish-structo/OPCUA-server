<!DOCTYPE HTML>
<html>
<head>
   <title>Data Types</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "html_uainformationmodeldatatypes.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="10">
  <tr valign="middle" bgcolor="#99CCFF">
    <td>
      <p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td style="vertical-align:middle;">
              <p style="font-family:Verdana; font-size:9pt; font-style:italic;">OPC UA C++ Server &amp; Client SDK V6.00</p>
              <p style="font-family:Verdana; font-size:9pt; font-weight:bold;">Data Types</p>
            </td>
          </tr>
        </table>
      </p>
    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="html_welcome.htm">Top</a>&nbsp;
     <a href="html_uainformationmodelvariabletypes.htm">Previous</a>&nbsp;
     <a href="html_uainformationmodelreferencetypes.htm">Next</a>
     </span>
    </td>
  </tr>
  <tr bgcolor="white">
      <td colspan="2">
          <p class="p_Paragraph"><span class="f_Paragraph">The type of data provided by the variable's Value attribute is defined by the associated data type. The data type is pointed out by the DataType attribute of the variables and variable type nodes. The DataType attribute is of the NodeId type. In many cases, the value of the DataType attribute – called DataTypeId – will be well-known to clients and servers. Well-known DataTypeIds allow clients to use random addressing and interpret values without having to read the type description from the server. Therefore, servers may use well-known DataTypeIds without representing the corresponding data type nodes in their address space.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The BaseDataType is the root of the inheritance tree. The simplified inheritance hierarchy of the standard data types is shown in the figure below, where the whole subtree of built-in types is represented commonly by a single symbol.</span></p>
<p class="p_Paragraph"><img src="ua_introduction_standard_datatypes.png" width="211" height="126" alt="UA_Introduction_Standard_DataTypes" style="width:211px;height:126px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">To some standard data types – called built-in types - special rules apply. </span><span class="f_Reference">Built-in </span><span class="f_Paragraph">data types are a fixed set of data types. They have no encodings visible in the address space since the encoding should be known to all OPC UA products. Examples of built-in data types are Int32 and Double. The Built-in data types with a short description are listed in the table below.</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table style="border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<th style="vertical-align:top; width:92px; background-color:#99ccff; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Name</span></p>
</th>
<th style="vertical-align:top; width:521px; background-color:#99ccff; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph" style="font-weight: bold;">Description</span></p>
</th>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Boolean</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A two-state logical value (true or false).</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Byte</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between 0 and 255.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:13px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">ByteString</span></p>
</td>
<td style="vertical-align:top; width:521px; height:13px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A sequence of octets.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:13px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">DataValue</span></p>
</td>
<td style="vertical-align:top; width:521px; height:13px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A data value with an associated status code and timestamps.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">DateTime</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An instance in time.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">DiagnosticInfo</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A structure that contains detailed error and diagnostic information associated with a StatusCode.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Double</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An IEEE double precision (64 bit) floating point value.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">ExpandedNodeId</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A NodeId that allows the namespace URI to be specified instead of an index. It can also refer to nodes on other servers.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">ExtensionObject</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A structure that contains an application specific data type that may not be recognized by the receiver.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Float</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An IEEE single precision (32 bit) floating point value.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Guid</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A 16 byte value that can be used as a globally unique identifier.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Int16</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between -32768 and 32767.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Int32</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between – 2147483648 and 2147483647.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Int64</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between – 9223372036854775808 and 9223372036854775807</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">LocalizedText</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Human readable text with an optional locale identifier.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">NodeId</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An identifier for a node in the address space of an OPC UA server.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">QualifiedName</span></p>
</td>
<td style="vertical-align:top; width:521px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A name qualified by a namespace.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">SByte</span></p>
</td>
<td style="vertical-align:top; width:521px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between -128 and 127.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">StatusCode</span></p>
</td>
<td style="vertical-align:top; width:521px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A numeric identifier for an error or condition that is associated with a value or an operation.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">String</span></p>
</td>
<td style="vertical-align:top; width:521px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A sequence of Unicode characters.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">UInt16</span></p>
</td>
<td style="vertical-align:top; width:521px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between 0 and 65535.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">UInt32</span></p>
</td>
<td style="vertical-align:top; width:521px; height:8px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between 0 and 4294967295.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; height:19px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">UInt64</span></p>
</td>
<td style="vertical-align:top; width:521px; height:19px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An integer value between 0 and 18446744073709551615.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">Variant</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">A union of all of the types specified above.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:92px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">XmlElement</span></p>
</td>
<td style="vertical-align:top; width:521px; padding:3px;"><p class="p_Paragraph"><span class="f_Paragraph">An XML element.</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Paragraph"><span class="f_Paragraph">Most of the built-in types are similar to those known in other IT systems, except the NodeId type. This type needs some comments, because it is intended to be used by the random addressing mechanism to represent information allowing clients to uniquely identify and access the nodes. This built-in data type is a structure composed of:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">namespaceIndex: numeric values used to identify namespaces</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">identifierType: identifies the type of the NodeId, its format and its scope</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">identifier: unique identifier within the context of the namespace</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">The namespace is a URI (Unique Resource Identifier) that identifies the naming authority responsible for assigning the identifier element of the NodeId. Namespace URIs are identified by numeric values in OPC UA services to permit a more efficient transfer and processing (e.g. table lookups).</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Depending on the application requirements, the identifierType field may have the following values:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">NUMERIC: numeric </span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">STRING: text string</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">GUID: Globally Unique Identifier</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">OPAQUE: Namespace specific format</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Reference">Enumeration</span><span class="f_Paragraph"> is the next standard data type derived directly from BaseDataType that needs some remarks. It is to be used to represent a limited set of simple information entities. Therefore it is a simple and abstract type. All enumerations, like NodeClass, have to inherit from it. All types inheriting from the Enumeration have a special handling for the encoding.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">Process data could be complex. </span><span class="f_Reference">Structure</span><span class="f_Paragraph"> is an abstract data type defined as the base for all structured types. All data types inheriting from it have a special handling for the encoding. All complex data, if not defined in the specification explicitly as primitive, are created by defining of new types derived from the Structure. </span></p>
<p class="p_Paragraph"><span class="f_Paragraph">When complex data structures should be made available to the client there are basically three different approaches:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">1.</span></td><td style="border:none"><span class="f_Paragraph">Create several simple variables using simple data types reflecting parts of the structure and map the data structure using these variables as object or variable components.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">2.</span></td><td style="border:none"><span class="f_Paragraph">Create a complex data type and a simple variable using this data type.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Verdana';color:#000000;">3.</span></td><td style="border:none"><span class="f_Paragraph">Create a complex data type and a complex variable using this data type and also exposing the complex data structure as variables of the complex variable using simple data types.</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">An example of the first scenario is shown in the figure below where a variable of the ServerStatusType has components of a simple data type.</span></p>
<p class="p_Paragraph"><img src="ua_introduction_serverstatustype.png" width="224" height="244" alt="UA_Introduction_ServerStatusType" style="width:224px;height:244px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">The advantages of this approach are that:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">the complex structure of data is visible in the address space</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">a generic client can easily access those data without any knowledge of user-defined data types</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">the client can access individual parts of complex data</span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">The disadvantages of the first approach are that accessing individual data does not provide any transactional context; and for a specific client the server first has to convert data and the client has to convert data, again, to get the data structure the underlying system provides.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">An example of the second scenario is shown in the figure below.</span></p>
<p class="p_Paragraph"><img src="ua_introduction_serverstatusdatatype.png" width="211" height="217" alt="UA_Introduction_ServerStatusDataType" style="width:211px;height:217px;border:none" /></p>
<p class="p_Paragraph"><span class="f_Paragraph">Here, the same information as previously is available as a complex data type of the ServerStatusDataType that inherits from the Structure. The ServerStatusDataType arranges the server status data as a collection of fields. The advantages of this approach are that:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">data are accessed in a transaction context</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 5px 0px 5px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:13px"><span style="font-size:9pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_Paragraph">the complex data type can be constructed in a way that the server does not have to convert data and can pass them directly to the specific client that can directly use them. </span></td></tr></table></div><p class="p_Paragraph"><span class="f_Paragraph">The disadvantages are that the generic client might not be able to access and interpret the data or it has the burden to read the DataTypeDescription to interpret the data. The data structure is not visible in the address space; additional properties describing the data structure cannot be added to the data type. Individual parts of data cannot be read without accessing the whole data structure.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">The third approach combines both other approaches. Therefore the specific client can access data in its native format in a transactional context, whereas the generic client can access the simple data types of the components of the complex variable. The disadvantage is that the server has to be able to provide the native format and also interpret it to be able to provide information in simple data types. In some SDK’s support for this mapping is provided automatically for example by code generation for user defined types.</span></p>
<p class="p_Paragraph"><span class="f_Paragraph">When a transactional context is needed or the client should be able to get a large amount of data instead of subscribing to several individual values, the third approach is suitable. However, the server might not always have the knowledge how to interpret complex data or be able to have predefined structures for the complex data of the underlying system and therefore has to use the second approach just passing data to the specific client who is able to interpret the data.</span></p>

      </td>
  </tr>
  <tr>
    <td colspan="2" style="padding-top: 0px;">
         <p>
            <hr />
            <a href="mailto:support.automation@softing.com?subject=OPC UA C++ Server &amp; Client SDK V6.00 Documentation Feedback:Page=html_uainformationmodeldatatypes.htm">Send comments on this topic.</a>
         </p>
         <p>
            Copyright © Softing Industrial Automation GmbH&nbsp;2022
         </p>
    </td>
  </tr>
</table>
</body>
</html>
